//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// XML document found at '\src\NET35.Sparkle.LinkedInNET\..\LinkedInApi.xml'
// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='person' CN='Person' F=60))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'person'
    /// </summary>
    [Serializable, XmlRoot("person")]
    public class Person
    {
        /// <summary>
        /// Field: 'first-name' (default)
        /// </summary>
        [XmlElement(ElementName = "first-name")]
        public string Firstname { get; set; }

        /// <summary>
        /// Field: 'last-name' (default)
        /// </summary>
        [XmlElement(ElementName = "last-name")]
        public string Lastname { get; set; }

        /// <summary>
        /// Field: 'headline' (default)
        /// Field: 'headline' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "headline")]
        public string Headline { get; set; }

        /// <summary>
        /// Field: 'site-standard-profile-request/url' (default)
        /// </summary>
        [XmlElement(ElementName = "site-standard-profile-request")]
        public SiteStandardProfileRequest SiteStandardProfileRequest { get; set; }

        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Field: 'maiden-name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "maiden-name")]
        public string MaidenName { get; set; }

        /// <summary>
        /// Field: 'formatted-name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "formatted-name")]
        public string FormattedName { get; set; }

        /// <summary>
        /// Field: 'phonetic-first-name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "phonetic-first-name")]
        public string PhoneticFirstName { get; set; }

        /// <summary>
        /// Field: 'phonetic-last-name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "phonetic-last-name")]
        public string PhoneticLastName { get; set; }

        /// <summary>
        /// Field: 'formatted-phonetic-name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "formatted-phonetic-name")]
        public string FormattedPhoneticName { get; set; }

        /// <summary>
        /// Field: 'location:(name)' (on-demand)
        /// Field: 'location:(country:(code))' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "location")]
        public Location Location { get; set; }

        /// <summary>
        /// Field: 'industry' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "industry")]
        public string Industry { get; set; }

        /// <summary>
        /// Field: 'distance' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "distance")]
        public int? Distance { get; set; }

        /// <summary>
        /// Field: 'relation-to-viewer' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "relation-to-viewer")]
        public RelationToViewer RelationToViewer { get; set; }

        /// <summary>
        /// Field: 'current-status-timestamp' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "current-status-timestamp")]
        public long? CurrentStatusTimestamp { get; set; }

        /// <summary>
        /// Field: 'current-share' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "current-share")]
        public Share CurrentShare { get; set; }

        /// <summary>
        /// Field: 'num-connections' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "num-connections")]
        public int NumConnections { get; set; }

        /// <summary>
        /// Field: 'num-connections-capped' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "num-connections-capped")]
        public bool? NumConnectionsCapped { get; set; }

        /// <summary>
        /// Field: 'summary' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "summary")]
        public string Summary { get; set; }

        /// <summary>
        /// Field: 'specialties' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "specialties")]
        public string Specialties { get; set; }

        /// <summary>
        /// Field: 'positions' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "positions")]
        public PersonPositions Positions { get; set; }

        /// <summary>
        /// Field: 'picture-url' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "picture-url")]
        public string PictureUrl { get; set; }

        /// <summary>
        /// Field: 'api-standard-profile-request:(url)' (on-demand)
        /// Field: 'api-standard-profile-request:(headers)' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "api-standard-profile-request")]
        public ApiStandardProfileRequest ApiStandardProfileRequest { get; set; }

        /// <summary>
        /// Field: 'public-profile-url' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "public-profile-url")]
        public string PublicProfileUrl { get; set; }

        /// <summary>
        /// Field: 'email-address' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "email-address")]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Field: 'last-modified-timestamp' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "last-modified-timestamp")]
        public string LastModifiedTimestamp { get; set; }

        /// <summary>
        /// Field: 'proposal-comments' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "proposal-comments")]
        public string ProposalComments { get; set; }

        /// <summary>
        /// Field: 'associations' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "associations")]
        public string Associations { get; set; }

        /// <summary>
        /// Field: 'interests' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "interests")]
        public string Interests { get; set; }

        /// <summary>
        /// Field: 'publications' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "publications")]
        public Publications Publications { get; set; }

        /// <summary>
        /// Field: 'patents' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "patents")]
        public Patents Patents { get; set; }

        /// <summary>
        /// Field: 'languages' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "languages")]
        public Languages Languages { get; set; }

        /// <summary>
        /// Field: 'skills' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "skills")]
        public Skills Skills { get; set; }

        /// <summary>
        /// Field: 'certifications' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "certifications")]
        public Certifications Certifications { get; set; }

        /// <summary>
        /// Field: 'educations' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "educations")]
        public Educations Educations { get; set; }

        /// <summary>
        /// Field: 'courses' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "courses")]
        public Courses Courses { get; set; }

        /// <summary>
        /// Field: 'volunteer' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "volunteer")]
        public VolunteerExperiences Volunteer { get; set; }

        /// <summary>
        /// Field: 'three-current-positions' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "three-current-positions")]
        public PersonPositions ThreeCurrentPositions { get; set; }

        /// <summary>
        /// Field: 'three-past-positions' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "three-past-positions")]
        public PersonPositions ThreePastPositions { get; set; }

        /// <summary>
        /// Field: 'num-recommenders' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "num-recommenders")]
        public string NumRecommenders { get; set; }

        /// <summary>
        /// Field: 'recommendations-received' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "recommendations-received")]
        public Recommendations RecommendationsReceived { get; set; }

        /// <summary>
        /// Field: 'following' (on-demand)
        /// </summary>
        ////[XmlElement(ElementName = "following")] // Ignore="true"
        public string Following { get; set; }

        /// <summary>
        /// Field: 'job-bookmarks' (on-demand)
        /// </summary>
        ////[XmlElement(ElementName = "job-bookmarks")] // Ignore="true"
        public string JobBookmarks { get; set; }

        /// <summary>
        /// Field: 'suggestions' (on-demand)
        /// </summary>
        ////[XmlElement(ElementName = "suggestions")] // Ignore="true"
        public string Suggestions { get; set; }

        /// <summary>
        /// Field: 'date-of-birth' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "date-of-birth")]
        public DateParts DateOfBirth { get; set; }

        /// <summary>
        /// Field: 'member-url-resources' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "member-url-resources")]
        public UrlResources MemberUrlResources { get; set; }

        /// <summary>
        /// Field: 'related-profile-views' (on-demand)
        /// </summary>
        ////[XmlElement(ElementName = "related-profile-views")] // Ignore="true"
        public string RelatedProfileViews { get; set; }

        /// <summary>
        /// Field: 'honors-awards' (on-demand)
        /// </summary>
        ////[XmlElement(ElementName = "honors-awards")] // Ignore="true"
        public string HonorsAwards { get; set; }

        /// <summary>
        /// Field: 'phone-numbers' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "phone-numbers")]
        public PhoneNumbers PhoneNumbers { get; set; }

        /// <summary>
        /// Field: 'bound-account-types' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "bound-account-types")]
        public string BoundAccountTypes { get; set; }

        /// <summary>
        /// Field: 'im-accounts' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "im-accounts")]
        public string ImAccounts { get; set; }

        /// <summary>
        /// Field: 'main-address' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "main-address")]
        public string MainAddress { get; set; }

        /// <summary>
        /// Field: 'twitter-accounts' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "twitter-accounts")]
        public string TwitterAccounts { get; set; }

        /// <summary>
        /// Field: 'primary-twitter-account' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "primary-twitter-account")]
        public string PrimaryTwitterAccount { get; set; }

        /// <summary>
        /// Field: 'connections' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "connections")]
        public string Connections { get; set; }

        /// <summary>
        /// Field: 'group-memberships' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "group-memberships")]
        public string GroupMemberships { get; set; }

        /// <summary>
        /// Field: 'network' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "network")]
        public string Network { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='connections' CN='Connections' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'connections'
    /// </summary>
    [Serializable, XmlRoot("connections")]
    public class Connections
    {
        /// <summary>
        /// Field: 'person' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "person")]
        public List<Person> Person { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='share' CN='' F=7))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'share'
    /// </summary>
    [Serializable, XmlRoot("share")]
    public class Share
    {
        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Field: 'timestamp' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "timestamp")]
        public long Timestamp { get; set; }

        /// <summary>
        /// Field: 'comment' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "comment")]
        public string Comment { get; set; }

        /// <summary>
        /// Field: 'content' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "content")]
        public ShareContent Content { get; set; }

        /// <summary>
        /// Field: 'visibility/code' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "visibility")]
        public Visibility Visibility { get; set; }

        /// <summary>
        /// Field: 'source' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "source")]
        public ShareSource Source { get; set; }

        /// <summary>
        /// Field: 'author' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "author")]
        public ShareAuthor Author { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='ShareSource' CN='ShareSource' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'ShareSource'
    /// </summary>
    [Serializable, XmlRoot("ShareSource")]
    public class ShareSource
    {
        /// <summary>
        /// Field: 'service-provider' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "service-provider")]
        public ShareSourceProvider ServiceProvider { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='ShareSourceProvider' CN='ShareSourceProvider' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'ShareSourceProvider'
    /// </summary>
    [Serializable, XmlRoot("ShareSourceProvider")]
    public class ShareSourceProvider
    {
        /// <summary>
        /// Field: 'name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "name")]
        public string Name { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='ShareContent' CN='ShareContent' F=4))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'ShareContent'
    /// </summary>
    [Serializable, XmlRoot("ShareContent")]
    public class ShareContent
    {
        /// <summary>
        /// Field: 'title' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "title")]
        public string Title { get; set; }

        /// <summary>
        /// Field: 'submitted-url' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "submitted-url")]
        public string SubmittedUrl { get; set; }

        /// <summary>
        /// Field: 'submitted-image-url' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "submitted-image-url")]
        public string SubmittedImageUrl { get; set; }

        /// <summary>
        /// Field: 'description' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "description")]
        public string Description { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='ShareAuthor' CN='' F=3))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'ShareAuthor'
    /// </summary>
    [Serializable, XmlRoot("ShareAuthor")]
    public class ShareAuthor
    {
        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Field: 'first-name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "first-name")]
        public string FirstName { get; set; }

        /// <summary>
        /// Field: 'last-name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "last-name")]
        public string LastName { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='position' CN='PersonPosition' F=7))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'position'
    /// </summary>
    [Serializable, XmlRoot("position")]
    public class PersonPosition
    {
        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        public int Id { get; set; }

        /// <summary>
        /// Field: 'title' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "title")]
        public string Title { get; set; }

        /// <summary>
        /// Field: 'summary' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "summary")]
        public string Summary { get; set; }

        /// <summary>
        /// Field: 'start-date' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "start-date")]
        public DateParts StartDate { get; set; }

        /// <summary>
        /// Field: 'end-date' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "end-date")]
        public DateParts EndDate { get; set; }

        /// <summary>
        /// Field: 'is-current' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "is-current")]
        public bool IsCurrent { get; set; }

        /// <summary>
        /// Field: 'company' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "company")]
        public CompanyIdentifier Company { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='positions' CN='PersonPositions' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'positions'
    /// </summary>
    [Serializable, XmlRoot("positions")]
    public class PersonPositions
    {
        /// <summary>
        /// Field: 'position' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "position")]
        public List<PersonPosition> Position { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='CompanyIdentifier' CN='CompanyIdentifier' F=5))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'CompanyIdentifier'
    /// </summary>
    [Serializable, XmlRoot("CompanyIdentifier")]
    public class CompanyIdentifier
    {
        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        public int Id { get; set; }

        /// <summary>
        /// Field: 'name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Field: 'type' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Field: 'industry' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "industry")]
        public string Industry { get; set; }

        /// <summary>
        /// Field: 'ticker' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "ticker")]
        public string Ticker { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='DateParts' CN='DateParts' F=3))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'DateParts'
    /// </summary>
    [Serializable, XmlRoot("DateParts")]
    public class DateParts
    {
        /// <summary>
        /// Field: 'year' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "year")]
        public short? Year { get; set; }

        /// <summary>
        /// Field: 'month' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "month")]
        public short? Month { get; set; }

        /// <summary>
        /// Field: 'day' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "day")]
        public short? Day { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='relation-to-viewer' CN='' F=3))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'relation-to-viewer'
    /// </summary>
    [Serializable, XmlRoot("relation-to-viewer")]
    public class RelationToViewer
    {
        /// <summary>
        /// Field: 'distance' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "distance")]
        public int? Distance { get; set; }

        /// <summary>
        /// Field: 'related-connections' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "related-connections")]
        public string RelatedConnections { get; set; }

        /// <summary>
        /// Field: 'connections' (on-demand)
        /// </summary>
        ////[XmlElement(ElementName = "connections")] // Ignore="true"
        public int? Connections { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='languages' CN='Languages' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'languages'
    /// </summary>
    [Serializable, XmlRoot("languages")]
    public class Languages
    {
        /// <summary>
        /// Field: 'language' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "language")]
        public List<Language> Language { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='language' CN='Language' F=3))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'language'
    /// </summary>
    [Serializable, XmlRoot("language")]
    public class Language
    {
        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Field: 'language' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "language")]
        public LanguageInfo LanguageInfo { get; set; }

        /// <summary>
        /// Field: 'proficiency' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "proficiency")]
        public LanguageProficiency Proficiency { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='LanguageInfo' CN='LanguageInfo' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'LanguageInfo'
    /// </summary>
    [Serializable, XmlRoot("LanguageInfo")]
    public class LanguageInfo
    {
        /// <summary>
        /// Field: 'name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "name")]
        public string Name { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='LanguageProficiency' CN='LanguageProficiency' F=2))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'LanguageProficiency'
    /// </summary>
    [Serializable, XmlRoot("LanguageProficiency")]
    public class LanguageProficiency
    {
        /// <summary>
        /// Field: 'level' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "level")]
        public string Level { get; set; }

        /// <summary>
        /// Field: 'name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "name")]
        public string Name { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='skills' CN='Skills' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'skills'
    /// </summary>
    [Serializable, XmlRoot("skills")]
    public class Skills
    {
        /// <summary>
        /// Field: 'skill' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "skill")]
        public List<Skill> Skill { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='skill' CN='Skill' F=2))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'skill'
    /// </summary>
    [Serializable, XmlRoot("skill")]
    public class Skill
    {
        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Field: 'name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "name")]
        public string Name { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='certifications' CN='Certifications' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'certifications'
    /// </summary>
    [Serializable, XmlRoot("certifications")]
    public class Certifications
    {
        /// <summary>
        /// Field: 'certification' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "certification")]
        public List<Certification> Certification { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='certification' CN='Certification' F=6))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'certification'
    /// </summary>
    [Serializable, XmlRoot("certification")]
    public class Certification
    {
        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Field: 'name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Field: 'authority:(name)' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "authority")]
        public Authority Authority { get; set; }

        /// <summary>
        /// Field: 'number' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "number")]
        public string Number { get; set; }

        /// <summary>
        /// Field: 'start-date' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "start-date")]
        public string StartDate { get; set; }

        /// <summary>
        /// Field: 'end-date' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "end-date")]
        public string EndDate { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='educations' CN='Educations' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'educations'
    /// </summary>
    [Serializable, XmlRoot("educations")]
    public class Educations
    {
        /// <summary>
        /// Field: 'education' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "education")]
        public List<Education> Education { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='education' CN='Education' F=8))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'education'
    /// </summary>
    [Serializable, XmlRoot("education")]
    public class Education
    {
        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Field: 'school-name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "school-name")]
        public string SchoolName { get; set; }

        /// <summary>
        /// Field: 'field-of-study' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "field-of-study")]
        public string FieldOfStudy { get; set; }

        /// <summary>
        /// Field: 'start-date' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "start-date")]
        public string StartDate { get; set; }

        /// <summary>
        /// Field: 'end-date' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "end-date")]
        public string EndDate { get; set; }

        /// <summary>
        /// Field: 'degree' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "degree")]
        public string Degree { get; set; }

        /// <summary>
        /// Field: 'activities' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "activities")]
        public string Activities { get; set; }

        /// <summary>
        /// Field: 'notes' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "notes")]
        public string Notes { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='courses' CN='Courses' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'courses'
    /// </summary>
    [Serializable, XmlRoot("courses")]
    public class Courses
    {
        /// <summary>
        /// Field: 'course' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "course")]
        public List<Course> Course { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='course' CN='Course' F=3))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'course'
    /// </summary>
    [Serializable, XmlRoot("course")]
    public class Course
    {
        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Field: 'name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Field: 'number' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "number")]
        public string Number { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='volunteer-experiences' CN='VolunteerExperiences' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'volunteer-experiences'
    /// </summary>
    [Serializable, XmlRoot("volunteer-experiences")]
    public class VolunteerExperiences
    {
        /// <summary>
        /// Field: 'volunteer-experience' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "volunteer-experience")]
        public List<VolunteerExperience> VolunteerExperience { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='volunteer-experience' CN='VolunteerExperience' F=4))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'volunteer-experience'
    /// </summary>
    [Serializable, XmlRoot("volunteer-experience")]
    public class VolunteerExperience
    {
        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Field: 'role' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "role")]
        public string Role { get; set; }

        /// <summary>
        /// Field: 'organization:(name)' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "organization")]
        public Organization Organization { get; set; }

        /// <summary>
        /// Field: 'cause:(name)' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "cause")]
        public Cause Cause { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='recommendations' CN='Recommendations' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'recommendations'
    /// </summary>
    [Serializable, XmlRoot("recommendations")]
    public class Recommendations
    {
        /// <summary>
        /// Field: 'recommendation' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "recommendation")]
        public List<Recommendation> Recommendation { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='recommendation' CN='Recommendation' F=4))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'recommendation'
    /// </summary>
    [Serializable, XmlRoot("recommendation")]
    public class Recommendation
    {
        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Field: 'recommendation-type' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "recommendation-type")]
        public string RecommendationType { get; set; }

        /// <summary>
        /// Field: 'recommendation-text' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "recommendation-text")]
        public string RecommendationText { get; set; }

        /// <summary>
        /// Field: 'recommender' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "recommender")]
        public string Recommender { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='phone-numbers' CN='PhoneNumbers' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'phone-numbers'
    /// </summary>
    [Serializable, XmlRoot("phone-numbers")]
    public class PhoneNumbers
    {
        /// <summary>
        /// Field: 'phone-number' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "phone-number")]
        public List<PhoneNumber> PhoneNumber { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='phone-number' CN='PhoneNumber' F=2))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'phone-number'
    /// </summary>
    [Serializable, XmlRoot("phone-number")]
    public class PhoneNumber
    {
        /// <summary>
        /// Field: 'phone-type' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "phone-type")]
        public string Type { get; set; }

        /// <summary>
        /// Field: 'phone-number' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "phone-number")]
        public string Number { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='publications' CN='Publications' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'publications'
    /// </summary>
    [Serializable, XmlRoot("publications")]
    public class Publications
    {
        /// <summary>
        /// Field: 'publication' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "publication")]
        public List<Publication> Publication { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='publication' CN='Publication' F=9))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'publication'
    /// </summary>
    [Serializable, XmlRoot("publication")]
    public class Publication
    {
        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Field: 'title' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "title")]
        public string Title { get; set; }

        /// <summary>
        /// Field: 'publisher:(name)' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "publisher")]
        public Publisher Publisher { get; set; }

        /// <summary>
        /// Field: 'authors:(id)' (on-demand)
        /// Field: 'authors:(name)' (on-demand)
        /// Field: 'authors:(person)' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "authors")]
        public Authors Authors { get; set; }

        /// <summary>
        /// Field: 'date' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "date")]
        public string Date { get; set; }

        /// <summary>
        /// Field: 'url' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "url")]
        public string Url { get; set; }

        /// <summary>
        /// Field: 'summary' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "summary")]
        public string Summary { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='patents' CN='Patents' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'patents'
    /// </summary>
    [Serializable, XmlRoot("patents")]
    public class Patents
    {
        /// <summary>
        /// Field: 'patent' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "patent")]
        public List<Patent> Patent { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='patent' CN='Patent' F=12))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'patent'
    /// </summary>
    [Serializable, XmlRoot("patent")]
    public class Patent
    {
        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Field: 'title' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "title")]
        public string Title { get; set; }

        /// <summary>
        /// Field: 'summary' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "summary")]
        public string Summary { get; set; }

        /// <summary>
        /// Field: 'number' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "number")]
        public string Number { get; set; }

        /// <summary>
        /// Field: 'status:(id)' (on-demand)
        /// Field: 'status:(name)' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "status")]
        public Status Status { get; set; }

        /// <summary>
        /// Field: 'office:(name)' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "office")]
        public Office Office { get; set; }

        /// <summary>
        /// Field: 'inventors:(id)' (on-demand)
        /// Field: 'inventors:(name)' (on-demand)
        /// Field: 'inventors:(person)' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "inventors")]
        public Inventors Inventors { get; set; }

        /// <summary>
        /// Field: 'date' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "date")]
        public string Date { get; set; }

        /// <summary>
        /// Field: 'url' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "url")]
        public string Url { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='member-url-resources' CN='UrlResources' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'member-url-resources'
    /// </summary>
    [Serializable, XmlRoot("member-url-resources")]
    public class UrlResources
    {
        /// <summary>
        /// Field: 'member-url-resource' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "member-url-resource")]
        public List<UrlResource> MemberUrlResource { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='member-url-resource' CN='UrlResource' F=2))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'member-url-resource'
    /// </summary>
    [Serializable, XmlRoot("member-url-resource")]
    public class UrlResource
    {
        /// <summary>
        /// Field: 'url' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "url")]
        public string Url { get; set; }

        /// <summary>
        /// Field: 'name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "name")]
        public string Name { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='site-standard-profile-request' CN='SiteStandardProfileRequest' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'site-standard-profile-request'
    /// </summary>
    [Serializable, XmlRoot("site-standard-profile-request")]
    public class SiteStandardProfileRequest
    {
        /// <summary>
        /// Field: 'url' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "url")]
        public string Url { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='location' CN='Location' F=2))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'location'
    /// </summary>
    [Serializable, XmlRoot("location")]
    public class Location
    {
        /// <summary>
        /// Field: 'name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Field: 'country' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "country")]
        public Country Country { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='country' CN='Country' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'country'
    /// </summary>
    [Serializable, XmlRoot("country")]
    public class Country
    {
        /// <summary>
        /// Field: 'code' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "code")]
        public string Code { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='api-standard-profile-request' CN='ApiStandardProfileRequest' F=2))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'api-standard-profile-request'
    /// </summary>
    [Serializable, XmlRoot("api-standard-profile-request")]
    public class ApiStandardProfileRequest
    {
        /// <summary>
        /// Field: 'url' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "url")]
        public string Url { get; set; }

        /// <summary>
        /// Field: 'headers' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "headers")]
        public string Headers { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='visibility' CN='Visibility' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'visibility'
    /// </summary>
    [Serializable, XmlRoot("visibility")]
    public class Visibility
    {
        /// <summary>
        /// Field: 'code' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "code")]
        public string Code { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='authority' CN='Authority' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'authority'
    /// </summary>
    [Serializable, XmlRoot("authority")]
    public class Authority
    {
        /// <summary>
        /// Field: 'name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "name")]
        public string Name { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='organization' CN='Organization' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'organization'
    /// </summary>
    [Serializable, XmlRoot("organization")]
    public class Organization
    {
        /// <summary>
        /// Field: 'name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "name")]
        public string Name { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='cause' CN='Cause' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'cause'
    /// </summary>
    [Serializable, XmlRoot("cause")]
    public class Cause
    {
        /// <summary>
        /// Field: 'name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "name")]
        public string Name { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='publisher' CN='Publisher' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'publisher'
    /// </summary>
    [Serializable, XmlRoot("publisher")]
    public class Publisher
    {
        /// <summary>
        /// Field: 'name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "name")]
        public string Name { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='authors' CN='Authors' F=3))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'authors'
    /// </summary>
    [Serializable, XmlRoot("authors")]
    public class Authors
    {
        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Field: 'name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Field: 'person' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "person")]
        public string Person { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='status' CN='Status' F=2))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'status'
    /// </summary>
    [Serializable, XmlRoot("status")]
    public class Status
    {
        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Field: 'name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "name")]
        public string Name { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='office' CN='Office' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'office'
    /// </summary>
    [Serializable, XmlRoot("office")]
    public class Office
    {
        /// <summary>
        /// Field: 'name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "name")]
        public string Name { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=49), ReturnType(N='inventors' CN='Inventors' F=3))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'inventors'
    /// </summary>
    [Serializable, XmlRoot("inventors")]
    public class Inventors
    {
        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Field: 'name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Field: 'person' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "person")]
        public string Person { get; set; }

    }
}

// WriteReturnTypeFields(ApiGroup(N='Profiles', M=5, RT=49))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Field selectors for the 'person', 'connections', 'share', 'ShareSource', 'ShareSourceProvider', 'ShareContent', 'ShareAuthor', 'position', 'positions', 'CompanyIdentifier', 'DateParts', 'relation-to-viewer', 'languages', 'language', 'LanguageInfo', 'LanguageProficiency', 'skills', 'skill', 'certifications', 'certification', 'educations', 'education', 'courses', 'course', 'volunteer-experiences', 'volunteer-experience', 'recommendations', 'recommendation', 'phone-numbers', 'phone-number', 'publications', 'publication', 'patents', 'patent', 'member-url-resources', 'member-url-resource', 'site-standard-profile-request', 'location', 'country', 'api-standard-profile-request', 'visibility', 'authority', 'organization', 'cause', 'publisher', 'authors', 'status', 'office', 'inventors' return types.
    /// </summary>
    public static class ProfilesFields {
        /// <summary>
        /// Includes the field 'first-name'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithFirstName(this FieldSelector<Person> me) { return me.Add("first-name"); }
        
        /// <summary>
        /// Includes the field 'last-name'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithLastName(this FieldSelector<Person> me) { return me.Add("last-name"); }
        
        /// <summary>
        /// Includes the field 'headline'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithHeadline(this FieldSelector<Person> me) { return me.Add("headline"); }
        
        /// <summary>
        /// Includes the field 'site-standard-profile-request/url'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithSiteStandardProfileRequestUrl(this FieldSelector<Person> me) { return me.Add("site-standard-profile-request/url"); }
        
        /// <summary>
        /// Includes the field 'id'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithId(this FieldSelector<Person> me) { return me.Add("id"); }
        
        /// <summary>
        /// Includes the field 'maiden-name'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithMaidenName(this FieldSelector<Person> me) { return me.Add("maiden-name"); }
        
        /// <summary>
        /// Includes the field 'formatted-name'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithFormattedName(this FieldSelector<Person> me) { return me.Add("formatted-name"); }
        
        /// <summary>
        /// Includes the field 'phonetic-first-name'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithPhoneticFirstName(this FieldSelector<Person> me) { return me.Add("phonetic-first-name"); }
        
        /// <summary>
        /// Includes the field 'phonetic-last-name'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithPhoneticLastName(this FieldSelector<Person> me) { return me.Add("phonetic-last-name"); }
        
        /// <summary>
        /// Includes the field 'formatted-phonetic-name'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithFormattedPhoneticName(this FieldSelector<Person> me) { return me.Add("formatted-phonetic-name"); }
        
        /// <summary>
        /// Includes the field 'location:(name)'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithLocationName(this FieldSelector<Person> me) { return me.Add("location:(name)"); }
        
        /// <summary>
        /// Includes the field 'location:(country:(code))'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithLocationCountryCode(this FieldSelector<Person> me) { return me.Add("location:(country:(code))"); }
        
        /// <summary>
        /// Includes the field 'industry'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithIndustry(this FieldSelector<Person> me) { return me.Add("industry"); }
        
        /// <summary>
        /// Includes the field 'distance'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithDistance(this FieldSelector<Person> me) { return me.Add("distance"); }
        
        /// <summary>
        /// Includes the field 'relation-to-viewer'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithRelationToViewer(this FieldSelector<Person> me) { return me.Add("relation-to-viewer"); }
        
        /// <summary>
        /// Includes the field 'current-status-timestamp'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithCurrentStatusTimestamp(this FieldSelector<Person> me) { return me.Add("current-status-timestamp"); }
        
        /// <summary>
        /// Includes the field 'current-share'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithCurrentShare(this FieldSelector<Person> me) { return me.Add("current-share"); }
        
        /// <summary>
        /// Includes the field 'num-connections'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithNumConnections(this FieldSelector<Person> me) { return me.Add("num-connections"); }
        
        /// <summary>
        /// Includes the field 'num-connections-capped'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithNumConnectionsCapped(this FieldSelector<Person> me) { return me.Add("num-connections-capped"); }
        
        /// <summary>
        /// Includes the field 'summary'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithSummary(this FieldSelector<Person> me) { return me.Add("summary"); }
        
        /// <summary>
        /// Includes the field 'specialties'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithSpecialties(this FieldSelector<Person> me) { return me.Add("specialties"); }
        
        /// <summary>
        /// Includes the field 'positions'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithPositions(this FieldSelector<Person> me) { return me.Add("positions"); }
        
        /// <summary>
        /// Includes the field 'picture-url'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithPictureUrl(this FieldSelector<Person> me) { return me.Add("picture-url"); }
        
        /// <summary>
        /// Includes the field 'api-standard-profile-request:(url)'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithApiStandardProfileRequestUrl(this FieldSelector<Person> me) { return me.Add("api-standard-profile-request:(url)"); }
        
        /// <summary>
        /// Includes the field 'api-standard-profile-request:(headers)'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithApiStandardProfileRequestHeaders(this FieldSelector<Person> me) { return me.Add("api-standard-profile-request:(headers)"); }
        
        /// <summary>
        /// Includes the field 'public-profile-url'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithPublicProfileUrl(this FieldSelector<Person> me) { return me.Add("public-profile-url"); }
        
        /// <summary>
        /// Includes the field 'email-address'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithEmailAddress(this FieldSelector<Person> me) { return me.Add("email-address"); }
        
        /// <summary>
        /// Includes the field 'last-modified-timestamp'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithLastModifiedTimestamp(this FieldSelector<Person> me) { return me.Add("last-modified-timestamp"); }
        
        /// <summary>
        /// Includes the field 'proposal-comments'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithProposalComments(this FieldSelector<Person> me) { return me.Add("proposal-comments"); }
        
        /// <summary>
        /// Includes the field 'associations'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithAssociations(this FieldSelector<Person> me) { return me.Add("associations"); }
        
        /// <summary>
        /// Includes the field 'interests'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithInterests(this FieldSelector<Person> me) { return me.Add("interests"); }
        
        /// <summary>
        /// Includes the field 'publications'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithPublications(this FieldSelector<Person> me) { return me.Add("publications"); }
        
        /// <summary>
        /// Includes the field 'patents'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithPatents(this FieldSelector<Person> me) { return me.Add("patents"); }
        
        /// <summary>
        /// Includes the field 'languages'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithLanguages(this FieldSelector<Person> me) { return me.Add("languages"); }
        
        /// <summary>
        /// Includes the field 'skills'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithSkills(this FieldSelector<Person> me) { return me.Add("skills"); }
        
        /// <summary>
        /// Includes the field 'certifications'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithCertifications(this FieldSelector<Person> me) { return me.Add("certifications"); }
        
        /// <summary>
        /// Includes the field 'educations'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithEducations(this FieldSelector<Person> me) { return me.Add("educations"); }
        
        /// <summary>
        /// Includes the field 'courses'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithCourses(this FieldSelector<Person> me) { return me.Add("courses"); }
        
        /// <summary>
        /// Includes the field 'volunteer'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithVolunteer(this FieldSelector<Person> me) { return me.Add("volunteer"); }
        
        /// <summary>
        /// Includes the field 'three-current-positions'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithThreeCurrentPositions(this FieldSelector<Person> me) { return me.Add("three-current-positions"); }
        
        /// <summary>
        /// Includes the field 'three-past-positions'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithThreePastPositions(this FieldSelector<Person> me) { return me.Add("three-past-positions"); }
        
        /// <summary>
        /// Includes the field 'num-recommenders'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithNumRecommenders(this FieldSelector<Person> me) { return me.Add("num-recommenders"); }
        
        /// <summary>
        /// Includes the field 'recommendations-received'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithRecommendationsReceived(this FieldSelector<Person> me) { return me.Add("recommendations-received"); }
        
        /// <summary>
        /// Includes the field 'following'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithFollowing(this FieldSelector<Person> me) { return me.Add("following"); }
        
        /// <summary>
        /// Includes the field 'job-bookmarks'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithJobBookmarks(this FieldSelector<Person> me) { return me.Add("job-bookmarks"); }
        
        /// <summary>
        /// Includes the field 'suggestions'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithSuggestions(this FieldSelector<Person> me) { return me.Add("suggestions"); }
        
        /// <summary>
        /// Includes the field 'date-of-birth'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithDateOfBirth(this FieldSelector<Person> me) { return me.Add("date-of-birth"); }
        
        /// <summary>
        /// Includes the field 'member-url-resources'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithMemberUrlResources(this FieldSelector<Person> me) { return me.Add("member-url-resources"); }
        
        /// <summary>
        /// Includes the field 'related-profile-views'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithRelatedProfileViews(this FieldSelector<Person> me) { return me.Add("related-profile-views"); }
        
        /// <summary>
        /// Includes the field 'honors-awards'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithHonorsAwards(this FieldSelector<Person> me) { return me.Add("honors-awards"); }
        
        /// <summary>
        /// Includes the field 'phone-numbers'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithPhoneNumbers(this FieldSelector<Person> me) { return me.Add("phone-numbers"); }
        
        /// <summary>
        /// Includes the field 'bound-account-types'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithBoundAccountTypes(this FieldSelector<Person> me) { return me.Add("bound-account-types"); }
        
        /// <summary>
        /// Includes the field 'im-accounts'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithImAccounts(this FieldSelector<Person> me) { return me.Add("im-accounts"); }
        
        /// <summary>
        /// Includes the field 'main-address'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithMainAddress(this FieldSelector<Person> me) { return me.Add("main-address"); }
        
        /// <summary>
        /// Includes the field 'twitter-accounts'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithTwitterAccounts(this FieldSelector<Person> me) { return me.Add("twitter-accounts"); }
        
        /// <summary>
        /// Includes the field 'primary-twitter-account'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithPrimaryTwitterAccount(this FieldSelector<Person> me) { return me.Add("primary-twitter-account"); }
        
        /// <summary>
        /// Includes the field 'connections'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithConnections(this FieldSelector<Person> me) { return me.Add("connections"); }
        
        /// <summary>
        /// Includes the field 'group-memberships'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithGroupMemberships(this FieldSelector<Person> me) { return me.Add("group-memberships"); }
        
        /// <summary>
        /// Includes the field 'network'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithNetwork(this FieldSelector<Person> me) { return me.Add("network"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithAllFields(this FieldSelector<Person> me) { return me.AddRange("first-name", "last-name", "headline", "site-standard-profile-request/url", "id", "maiden-name", "formatted-name", "phonetic-first-name", "phonetic-last-name", "formatted-phonetic-name", "location:(name)", "location:(country:(code))", "industry", "distance", "relation-to-viewer", "current-status-timestamp", "current-share", "num-connections", "num-connections-capped", "summary", "specialties", "positions", "picture-url", "api-standard-profile-request:(url)", "api-standard-profile-request:(headers)", "public-profile-url", "email-address", "last-modified-timestamp", "proposal-comments", "associations", "interests", "publications", "patents", "languages", "skills", "certifications", "educations", "courses", "volunteer", "three-current-positions", "three-past-positions", "num-recommenders", "recommendations-received", "following", "job-bookmarks", "suggestions", "date-of-birth", "member-url-resources", "related-profile-views", "honors-awards", "phone-numbers", "bound-account-types", "im-accounts", "main-address", "twitter-accounts", "primary-twitter-account", "connections", "group-memberships", "network"); }
        
        /// <summary>
        /// Includes the field 'person'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Connections> WithPerson(this FieldSelector<Connections> me) { return me.Add("person"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Connections> WithAllFields(this FieldSelector<Connections> me) { return me.AddRange("person"); }
        
        /// <summary>
        /// Includes the field 'id'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Share> WithId(this FieldSelector<Share> me) { return me.Add("id"); }
        
        /// <summary>
        /// Includes the field 'timestamp'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Share> WithTimestamp(this FieldSelector<Share> me) { return me.Add("timestamp"); }
        
        /// <summary>
        /// Includes the field 'comment'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Share> WithComment(this FieldSelector<Share> me) { return me.Add("comment"); }
        
        /// <summary>
        /// Includes the field 'content'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Share> WithContent(this FieldSelector<Share> me) { return me.Add("content"); }
        
        /// <summary>
        /// Includes the field 'visibility/code'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Share> WithVisibilityCode(this FieldSelector<Share> me) { return me.Add("visibility/code"); }
        
        /// <summary>
        /// Includes the field 'source'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Share> WithSource(this FieldSelector<Share> me) { return me.Add("source"); }
        
        /// <summary>
        /// Includes the field 'author'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Share> WithAuthor(this FieldSelector<Share> me) { return me.Add("author"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Share> WithAllFields(this FieldSelector<Share> me) { return me.AddRange("id", "timestamp", "comment", "content", "visibility/code", "source", "author"); }
        
        /// <summary>
        /// Includes the field 'service-provider'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<ShareSource> WithServiceProvider(this FieldSelector<ShareSource> me) { return me.Add("service-provider"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<ShareSource> WithAllFields(this FieldSelector<ShareSource> me) { return me.AddRange("service-provider"); }
        
        /// <summary>
        /// Includes the field 'name'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<ShareSourceProvider> WithName(this FieldSelector<ShareSourceProvider> me) { return me.Add("name"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<ShareSourceProvider> WithAllFields(this FieldSelector<ShareSourceProvider> me) { return me.AddRange("name"); }
        
        /// <summary>
        /// Includes the field 'title'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<ShareContent> WithTitle(this FieldSelector<ShareContent> me) { return me.Add("title"); }
        
        /// <summary>
        /// Includes the field 'submitted-url'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<ShareContent> WithSubmittedUrl(this FieldSelector<ShareContent> me) { return me.Add("submitted-url"); }
        
        /// <summary>
        /// Includes the field 'submitted-image-url'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<ShareContent> WithSubmittedImageUrl(this FieldSelector<ShareContent> me) { return me.Add("submitted-image-url"); }
        
        /// <summary>
        /// Includes the field 'description'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<ShareContent> WithDescription(this FieldSelector<ShareContent> me) { return me.Add("description"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<ShareContent> WithAllFields(this FieldSelector<ShareContent> me) { return me.AddRange("title", "submitted-url", "submitted-image-url", "description"); }
        
        /// <summary>
        /// Includes the field 'id'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<ShareAuthor> WithId(this FieldSelector<ShareAuthor> me) { return me.Add("id"); }
        
        /// <summary>
        /// Includes the field 'first-name'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<ShareAuthor> WithFirstName(this FieldSelector<ShareAuthor> me) { return me.Add("first-name"); }
        
        /// <summary>
        /// Includes the field 'last-name'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<ShareAuthor> WithLastName(this FieldSelector<ShareAuthor> me) { return me.Add("last-name"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<ShareAuthor> WithAllFields(this FieldSelector<ShareAuthor> me) { return me.AddRange("id", "first-name", "last-name"); }
        
        /// <summary>
        /// Includes the field 'id'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<PersonPosition> WithId(this FieldSelector<PersonPosition> me) { return me.Add("id"); }
        
        /// <summary>
        /// Includes the field 'title'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<PersonPosition> WithTitle(this FieldSelector<PersonPosition> me) { return me.Add("title"); }
        
        /// <summary>
        /// Includes the field 'summary'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<PersonPosition> WithSummary(this FieldSelector<PersonPosition> me) { return me.Add("summary"); }
        
        /// <summary>
        /// Includes the field 'start-date'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<PersonPosition> WithStartDate(this FieldSelector<PersonPosition> me) { return me.Add("start-date"); }
        
        /// <summary>
        /// Includes the field 'end-date'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<PersonPosition> WithEndDate(this FieldSelector<PersonPosition> me) { return me.Add("end-date"); }
        
        /// <summary>
        /// Includes the field 'is-current'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<PersonPosition> WithIsCurrent(this FieldSelector<PersonPosition> me) { return me.Add("is-current"); }
        
        /// <summary>
        /// Includes the field 'company'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<PersonPosition> WithCompany(this FieldSelector<PersonPosition> me) { return me.Add("company"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<PersonPosition> WithAllFields(this FieldSelector<PersonPosition> me) { return me.AddRange("id", "title", "summary", "start-date", "end-date", "is-current", "company"); }
        
        /// <summary>
        /// Includes the field 'position'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<PersonPositions> WithPosition(this FieldSelector<PersonPositions> me) { return me.Add("position"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<PersonPositions> WithAllFields(this FieldSelector<PersonPositions> me) { return me.AddRange("position"); }
        
        /// <summary>
        /// Includes the field 'id'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<CompanyIdentifier> WithId(this FieldSelector<CompanyIdentifier> me) { return me.Add("id"); }
        
        /// <summary>
        /// Includes the field 'name'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<CompanyIdentifier> WithName(this FieldSelector<CompanyIdentifier> me) { return me.Add("name"); }
        
        /// <summary>
        /// Includes the field 'type'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<CompanyIdentifier> WithType(this FieldSelector<CompanyIdentifier> me) { return me.Add("type"); }
        
        /// <summary>
        /// Includes the field 'industry'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<CompanyIdentifier> WithIndustry(this FieldSelector<CompanyIdentifier> me) { return me.Add("industry"); }
        
        /// <summary>
        /// Includes the field 'ticker'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<CompanyIdentifier> WithTicker(this FieldSelector<CompanyIdentifier> me) { return me.Add("ticker"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<CompanyIdentifier> WithAllFields(this FieldSelector<CompanyIdentifier> me) { return me.AddRange("id", "name", "type", "industry", "ticker"); }
        
        /// <summary>
        /// Includes the field 'year'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<DateParts> WithYear(this FieldSelector<DateParts> me) { return me.Add("year"); }
        
        /// <summary>
        /// Includes the field 'month'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<DateParts> WithMonth(this FieldSelector<DateParts> me) { return me.Add("month"); }
        
        /// <summary>
        /// Includes the field 'day'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<DateParts> WithDay(this FieldSelector<DateParts> me) { return me.Add("day"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<DateParts> WithAllFields(this FieldSelector<DateParts> me) { return me.AddRange("year", "month", "day"); }
        
        /// <summary>
        /// Includes the field 'distance'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<RelationToViewer> WithDistance(this FieldSelector<RelationToViewer> me) { return me.Add("distance"); }
        
        /// <summary>
        /// Includes the field 'related-connections'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<RelationToViewer> WithRelatedConnections(this FieldSelector<RelationToViewer> me) { return me.Add("related-connections"); }
        
        /// <summary>
        /// Includes the field 'connections'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<RelationToViewer> WithConnections(this FieldSelector<RelationToViewer> me) { return me.Add("connections"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<RelationToViewer> WithAllFields(this FieldSelector<RelationToViewer> me) { return me.AddRange("distance", "related-connections", "connections"); }
        
        /// <summary>
        /// Includes the field 'language'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Languages> WithLanguage(this FieldSelector<Languages> me) { return me.Add("language"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Languages> WithAllFields(this FieldSelector<Languages> me) { return me.AddRange("language"); }
        
        /// <summary>
        /// Includes the field 'id'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Language> WithId(this FieldSelector<Language> me) { return me.Add("id"); }
        
        /// <summary>
        /// Includes the field 'language'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Language> WithLanguage(this FieldSelector<Language> me) { return me.Add("language"); }
        
        /// <summary>
        /// Includes the field 'proficiency'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Language> WithProficiency(this FieldSelector<Language> me) { return me.Add("proficiency"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Language> WithAllFields(this FieldSelector<Language> me) { return me.AddRange("id", "language", "proficiency"); }
        
        /// <summary>
        /// Includes the field 'name'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<LanguageInfo> WithName(this FieldSelector<LanguageInfo> me) { return me.Add("name"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<LanguageInfo> WithAllFields(this FieldSelector<LanguageInfo> me) { return me.AddRange("name"); }
        
        /// <summary>
        /// Includes the field 'level'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<LanguageProficiency> WithLevel(this FieldSelector<LanguageProficiency> me) { return me.Add("level"); }
        
        /// <summary>
        /// Includes the field 'name'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<LanguageProficiency> WithName(this FieldSelector<LanguageProficiency> me) { return me.Add("name"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<LanguageProficiency> WithAllFields(this FieldSelector<LanguageProficiency> me) { return me.AddRange("level", "name"); }
        
        /// <summary>
        /// Includes the field 'skill'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Skills> WithSkill(this FieldSelector<Skills> me) { return me.Add("skill"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Skills> WithAllFields(this FieldSelector<Skills> me) { return me.AddRange("skill"); }
        
        /// <summary>
        /// Includes the field 'id'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Skill> WithId(this FieldSelector<Skill> me) { return me.Add("id"); }
        
        /// <summary>
        /// Includes the field 'name'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Skill> WithName(this FieldSelector<Skill> me) { return me.Add("name"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Skill> WithAllFields(this FieldSelector<Skill> me) { return me.AddRange("id", "name"); }
        
        /// <summary>
        /// Includes the field 'certification'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Certifications> WithCertification(this FieldSelector<Certifications> me) { return me.Add("certification"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Certifications> WithAllFields(this FieldSelector<Certifications> me) { return me.AddRange("certification"); }
        
        /// <summary>
        /// Includes the field 'id'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Certification> WithId(this FieldSelector<Certification> me) { return me.Add("id"); }
        
        /// <summary>
        /// Includes the field 'name'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Certification> WithName(this FieldSelector<Certification> me) { return me.Add("name"); }
        
        /// <summary>
        /// Includes the field 'authority:(name)'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Certification> WithAuthorityName(this FieldSelector<Certification> me) { return me.Add("authority:(name)"); }
        
        /// <summary>
        /// Includes the field 'number'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Certification> WithNumber(this FieldSelector<Certification> me) { return me.Add("number"); }
        
        /// <summary>
        /// Includes the field 'start-date'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Certification> WithStartDate(this FieldSelector<Certification> me) { return me.Add("start-date"); }
        
        /// <summary>
        /// Includes the field 'end-date'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Certification> WithEndDate(this FieldSelector<Certification> me) { return me.Add("end-date"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Certification> WithAllFields(this FieldSelector<Certification> me) { return me.AddRange("id", "name", "authority:(name)", "number", "start-date", "end-date"); }
        
        /// <summary>
        /// Includes the field 'education'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Educations> WithEducation(this FieldSelector<Educations> me) { return me.Add("education"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Educations> WithAllFields(this FieldSelector<Educations> me) { return me.AddRange("education"); }
        
        /// <summary>
        /// Includes the field 'id'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Education> WithId(this FieldSelector<Education> me) { return me.Add("id"); }
        
        /// <summary>
        /// Includes the field 'school-name'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Education> WithSchoolName(this FieldSelector<Education> me) { return me.Add("school-name"); }
        
        /// <summary>
        /// Includes the field 'field-of-study'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Education> WithFieldOfStudy(this FieldSelector<Education> me) { return me.Add("field-of-study"); }
        
        /// <summary>
        /// Includes the field 'start-date'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Education> WithStartDate(this FieldSelector<Education> me) { return me.Add("start-date"); }
        
        /// <summary>
        /// Includes the field 'end-date'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Education> WithEndDate(this FieldSelector<Education> me) { return me.Add("end-date"); }
        
        /// <summary>
        /// Includes the field 'degree'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Education> WithDegree(this FieldSelector<Education> me) { return me.Add("degree"); }
        
        /// <summary>
        /// Includes the field 'activities'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Education> WithActivities(this FieldSelector<Education> me) { return me.Add("activities"); }
        
        /// <summary>
        /// Includes the field 'notes'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Education> WithNotes(this FieldSelector<Education> me) { return me.Add("notes"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Education> WithAllFields(this FieldSelector<Education> me) { return me.AddRange("id", "school-name", "field-of-study", "start-date", "end-date", "degree", "activities", "notes"); }
        
        /// <summary>
        /// Includes the field 'course'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Courses> WithCourse(this FieldSelector<Courses> me) { return me.Add("course"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Courses> WithAllFields(this FieldSelector<Courses> me) { return me.AddRange("course"); }
        
        /// <summary>
        /// Includes the field 'id'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Course> WithId(this FieldSelector<Course> me) { return me.Add("id"); }
        
        /// <summary>
        /// Includes the field 'name'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Course> WithName(this FieldSelector<Course> me) { return me.Add("name"); }
        
        /// <summary>
        /// Includes the field 'number'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Course> WithNumber(this FieldSelector<Course> me) { return me.Add("number"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Course> WithAllFields(this FieldSelector<Course> me) { return me.AddRange("id", "name", "number"); }
        
        /// <summary>
        /// Includes the field 'volunteer-experience'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<VolunteerExperiences> WithVolunteerExperience(this FieldSelector<VolunteerExperiences> me) { return me.Add("volunteer-experience"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<VolunteerExperiences> WithAllFields(this FieldSelector<VolunteerExperiences> me) { return me.AddRange("volunteer-experience"); }
        
        /// <summary>
        /// Includes the field 'id'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<VolunteerExperience> WithId(this FieldSelector<VolunteerExperience> me) { return me.Add("id"); }
        
        /// <summary>
        /// Includes the field 'role'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<VolunteerExperience> WithRole(this FieldSelector<VolunteerExperience> me) { return me.Add("role"); }
        
        /// <summary>
        /// Includes the field 'organization:(name)'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<VolunteerExperience> WithOrganizationName(this FieldSelector<VolunteerExperience> me) { return me.Add("organization:(name)"); }
        
        /// <summary>
        /// Includes the field 'cause:(name)'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<VolunteerExperience> WithCauseName(this FieldSelector<VolunteerExperience> me) { return me.Add("cause:(name)"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<VolunteerExperience> WithAllFields(this FieldSelector<VolunteerExperience> me) { return me.AddRange("id", "role", "organization:(name)", "cause:(name)"); }
        
        /// <summary>
        /// Includes the field 'recommendation'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Recommendations> WithRecommendation(this FieldSelector<Recommendations> me) { return me.Add("recommendation"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Recommendations> WithAllFields(this FieldSelector<Recommendations> me) { return me.AddRange("recommendation"); }
        
        /// <summary>
        /// Includes the field 'id'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Recommendation> WithId(this FieldSelector<Recommendation> me) { return me.Add("id"); }
        
        /// <summary>
        /// Includes the field 'recommendation-type'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Recommendation> WithRecommendationType(this FieldSelector<Recommendation> me) { return me.Add("recommendation-type"); }
        
        /// <summary>
        /// Includes the field 'recommendation-text'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Recommendation> WithRecommendationText(this FieldSelector<Recommendation> me) { return me.Add("recommendation-text"); }
        
        /// <summary>
        /// Includes the field 'recommender'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Recommendation> WithRecommender(this FieldSelector<Recommendation> me) { return me.Add("recommender"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Recommendation> WithAllFields(this FieldSelector<Recommendation> me) { return me.AddRange("id", "recommendation-type", "recommendation-text", "recommender"); }
        
        /// <summary>
        /// Includes the field 'phone-number'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<PhoneNumbers> WithPhoneNumber(this FieldSelector<PhoneNumbers> me) { return me.Add("phone-number"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<PhoneNumbers> WithAllFields(this FieldSelector<PhoneNumbers> me) { return me.AddRange("phone-number"); }
        
        /// <summary>
        /// Includes the field 'phone-type'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<PhoneNumber> WithPhoneType(this FieldSelector<PhoneNumber> me) { return me.Add("phone-type"); }
        
        /// <summary>
        /// Includes the field 'phone-number'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<PhoneNumber> WithPhoneNumber(this FieldSelector<PhoneNumber> me) { return me.Add("phone-number"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<PhoneNumber> WithAllFields(this FieldSelector<PhoneNumber> me) { return me.AddRange("phone-type", "phone-number"); }
        
        /// <summary>
        /// Includes the field 'publication'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Publications> WithPublication(this FieldSelector<Publications> me) { return me.Add("publication"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Publications> WithAllFields(this FieldSelector<Publications> me) { return me.AddRange("publication"); }
        
        /// <summary>
        /// Includes the field 'id'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Publication> WithId(this FieldSelector<Publication> me) { return me.Add("id"); }
        
        /// <summary>
        /// Includes the field 'title'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Publication> WithTitle(this FieldSelector<Publication> me) { return me.Add("title"); }
        
        /// <summary>
        /// Includes the field 'publisher:(name)'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Publication> WithPublisherName(this FieldSelector<Publication> me) { return me.Add("publisher:(name)"); }
        
        /// <summary>
        /// Includes the field 'authors:(id)'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Publication> WithAuthorsId(this FieldSelector<Publication> me) { return me.Add("authors:(id)"); }
        
        /// <summary>
        /// Includes the field 'authors:(name)'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Publication> WithAuthorsName(this FieldSelector<Publication> me) { return me.Add("authors:(name)"); }
        
        /// <summary>
        /// Includes the field 'authors:(person)'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Publication> WithAuthorsPerson(this FieldSelector<Publication> me) { return me.Add("authors:(person)"); }
        
        /// <summary>
        /// Includes the field 'date'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Publication> WithDate(this FieldSelector<Publication> me) { return me.Add("date"); }
        
        /// <summary>
        /// Includes the field 'url'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Publication> WithUrl(this FieldSelector<Publication> me) { return me.Add("url"); }
        
        /// <summary>
        /// Includes the field 'summary'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Publication> WithSummary(this FieldSelector<Publication> me) { return me.Add("summary"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Publication> WithAllFields(this FieldSelector<Publication> me) { return me.AddRange("id", "title", "publisher:(name)", "authors:(id)", "authors:(name)", "authors:(person)", "date", "url", "summary"); }
        
        /// <summary>
        /// Includes the field 'patent'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Patents> WithPatent(this FieldSelector<Patents> me) { return me.Add("patent"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Patents> WithAllFields(this FieldSelector<Patents> me) { return me.AddRange("patent"); }
        
        /// <summary>
        /// Includes the field 'id'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Patent> WithId(this FieldSelector<Patent> me) { return me.Add("id"); }
        
        /// <summary>
        /// Includes the field 'title'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Patent> WithTitle(this FieldSelector<Patent> me) { return me.Add("title"); }
        
        /// <summary>
        /// Includes the field 'summary'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Patent> WithSummary(this FieldSelector<Patent> me) { return me.Add("summary"); }
        
        /// <summary>
        /// Includes the field 'number'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Patent> WithNumber(this FieldSelector<Patent> me) { return me.Add("number"); }
        
        /// <summary>
        /// Includes the field 'status:(id)'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Patent> WithStatusId(this FieldSelector<Patent> me) { return me.Add("status:(id)"); }
        
        /// <summary>
        /// Includes the field 'status:(name)'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Patent> WithStatusName(this FieldSelector<Patent> me) { return me.Add("status:(name)"); }
        
        /// <summary>
        /// Includes the field 'office:(name)'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Patent> WithOfficeName(this FieldSelector<Patent> me) { return me.Add("office:(name)"); }
        
        /// <summary>
        /// Includes the field 'inventors:(id)'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Patent> WithInventorsId(this FieldSelector<Patent> me) { return me.Add("inventors:(id)"); }
        
        /// <summary>
        /// Includes the field 'inventors:(name)'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Patent> WithInventorsName(this FieldSelector<Patent> me) { return me.Add("inventors:(name)"); }
        
        /// <summary>
        /// Includes the field 'inventors:(person)'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Patent> WithInventorsPerson(this FieldSelector<Patent> me) { return me.Add("inventors:(person)"); }
        
        /// <summary>
        /// Includes the field 'date'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Patent> WithDate(this FieldSelector<Patent> me) { return me.Add("date"); }
        
        /// <summary>
        /// Includes the field 'url'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Patent> WithUrl(this FieldSelector<Patent> me) { return me.Add("url"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Patent> WithAllFields(this FieldSelector<Patent> me) { return me.AddRange("id", "title", "summary", "number", "status:(id)", "status:(name)", "office:(name)", "inventors:(id)", "inventors:(name)", "inventors:(person)", "date", "url"); }
        
        /// <summary>
        /// Includes the field 'member-url-resource'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<UrlResources> WithMemberUrlResource(this FieldSelector<UrlResources> me) { return me.Add("member-url-resource"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<UrlResources> WithAllFields(this FieldSelector<UrlResources> me) { return me.AddRange("member-url-resource"); }
        
        /// <summary>
        /// Includes the field 'url'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<UrlResource> WithUrl(this FieldSelector<UrlResource> me) { return me.Add("url"); }
        
        /// <summary>
        /// Includes the field 'name'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<UrlResource> WithName(this FieldSelector<UrlResource> me) { return me.Add("name"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<UrlResource> WithAllFields(this FieldSelector<UrlResource> me) { return me.AddRange("url", "name"); }
        
        /// <summary>
        /// Includes the field 'url'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<SiteStandardProfileRequest> WithUrl(this FieldSelector<SiteStandardProfileRequest> me) { return me.Add("url"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<SiteStandardProfileRequest> WithAllFields(this FieldSelector<SiteStandardProfileRequest> me) { return me.AddRange("url"); }
        
        /// <summary>
        /// Includes the field 'name'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Location> WithName(this FieldSelector<Location> me) { return me.Add("name"); }
        
        /// <summary>
        /// Includes the field 'country'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Location> WithCountry(this FieldSelector<Location> me) { return me.Add("country"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Location> WithAllFields(this FieldSelector<Location> me) { return me.AddRange("name", "country"); }
        
        /// <summary>
        /// Includes the field 'code'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Country> WithCode(this FieldSelector<Country> me) { return me.Add("code"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Country> WithAllFields(this FieldSelector<Country> me) { return me.AddRange("code"); }
        
        /// <summary>
        /// Includes the field 'url'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<ApiStandardProfileRequest> WithUrl(this FieldSelector<ApiStandardProfileRequest> me) { return me.Add("url"); }
        
        /// <summary>
        /// Includes the field 'headers'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<ApiStandardProfileRequest> WithHeaders(this FieldSelector<ApiStandardProfileRequest> me) { return me.Add("headers"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<ApiStandardProfileRequest> WithAllFields(this FieldSelector<ApiStandardProfileRequest> me) { return me.AddRange("url", "headers"); }
        
        /// <summary>
        /// Includes the field 'code'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Visibility> WithCode(this FieldSelector<Visibility> me) { return me.Add("code"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Visibility> WithAllFields(this FieldSelector<Visibility> me) { return me.AddRange("code"); }
        
        /// <summary>
        /// Includes the field 'name'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Authority> WithName(this FieldSelector<Authority> me) { return me.Add("name"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Authority> WithAllFields(this FieldSelector<Authority> me) { return me.AddRange("name"); }
        
        /// <summary>
        /// Includes the field 'name'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Organization> WithName(this FieldSelector<Organization> me) { return me.Add("name"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Organization> WithAllFields(this FieldSelector<Organization> me) { return me.AddRange("name"); }
        
        /// <summary>
        /// Includes the field 'name'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Cause> WithName(this FieldSelector<Cause> me) { return me.Add("name"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Cause> WithAllFields(this FieldSelector<Cause> me) { return me.AddRange("name"); }
        
        /// <summary>
        /// Includes the field 'name'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Publisher> WithName(this FieldSelector<Publisher> me) { return me.Add("name"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Publisher> WithAllFields(this FieldSelector<Publisher> me) { return me.AddRange("name"); }
        
        /// <summary>
        /// Includes the field 'id'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Authors> WithId(this FieldSelector<Authors> me) { return me.Add("id"); }
        
        /// <summary>
        /// Includes the field 'name'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Authors> WithName(this FieldSelector<Authors> me) { return me.Add("name"); }
        
        /// <summary>
        /// Includes the field 'person'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Authors> WithPerson(this FieldSelector<Authors> me) { return me.Add("person"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Authors> WithAllFields(this FieldSelector<Authors> me) { return me.AddRange("id", "name", "person"); }
        
        /// <summary>
        /// Includes the field 'id'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Status> WithId(this FieldSelector<Status> me) { return me.Add("id"); }
        
        /// <summary>
        /// Includes the field 'name'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Status> WithName(this FieldSelector<Status> me) { return me.Add("name"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Status> WithAllFields(this FieldSelector<Status> me) { return me.AddRange("id", "name"); }
        
        /// <summary>
        /// Includes the field 'name'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Office> WithName(this FieldSelector<Office> me) { return me.Add("name"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Office> WithAllFields(this FieldSelector<Office> me) { return me.AddRange("name"); }
        
        /// <summary>
        /// Includes the field 'id'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Inventors> WithId(this FieldSelector<Inventors> me) { return me.Add("id"); }
        
        /// <summary>
        /// Includes the field 'name'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Inventors> WithName(this FieldSelector<Inventors> me) { return me.Add("name"); }
        
        /// <summary>
        /// Includes the field 'person'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Inventors> WithPerson(this FieldSelector<Inventors> me) { return me.Add("person"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Inventors> WithAllFields(this FieldSelector<Inventors> me) { return me.AddRange("id", "name", "person"); }
        
    }
}

// WriteReturnTypes(ApiGroup(N='Companies', M=4, RT=1), ReturnType(N='company' CN='Company' F=2))
namespace Sparkle.LinkedInNET.Companies
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'company'
    /// </summary>
    [Serializable, XmlRoot("company")]
    public class Company
    {
        /// <summary>
        /// Field: 'id' (default)
        /// </summary>
        [XmlElement(ElementName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Field: 'name' (default)
        /// </summary>
        [XmlElement(ElementName = "name")]
        public string Name { get; set; }

    }
}

// WriteReturnTypeFields(ApiGroup(N='Companies', M=4, RT=1))
namespace Sparkle.LinkedInNET.Companies
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Field selectors for the 'company' return types.
    /// </summary>
    public static class CompaniesFields {
        /// <summary>
        /// Includes the field 'id'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Company> WithId(this FieldSelector<Company> me) { return me.Add("id"); }
        
        /// <summary>
        /// Includes the field 'name'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Company> WithName(this FieldSelector<Company> me) { return me.Add("name"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Company> WithAllFields(this FieldSelector<Company> me) { return me.AddRange("id", "name"); }
        
    }
}

// WriteReturnTypeFields(ApiGroup(N='Groups', M=0, RT=0))
namespace Sparkle.LinkedInNET.Groups
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Field selectors for the '' return types.
    /// </summary>
    public static class GroupsFields {
    }
}

// WriteReturnTypeFields(ApiGroup(N='Jobs', M=0, RT=0))
namespace Sparkle.LinkedInNET.Jobs
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Field selectors for the '' return types.
    /// </summary>
    public static class JobsFields {
    }
}

// WriteApiGroup(ApiGroup(N='Profiles', M=5, RT=49))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Xml.Serialization;
    using Sparkle.LinkedInNET.Internals;

    /// <summary>
    /// Name: 'Profiles'
    /// </summary>
    public class ProfilesApi : BaseApi
    {
        internal ProfilesApi(LinkedInApi linkedInApi)
            : base(linkedInApi)
        {
        }
        
        /// <summary>
        /// the profile of the current user
        /// </summary>
        public Person GetMyProfile(
              UserAuthorization user
            , string[] acceptLanguages = null
            , FieldSelector<Person> fields = null
        )
        {
            const string urlFormat = "/v1/people/~{FieldSelector}";
            var url = FormatUrl(urlFormat, fields);

            var context = new RequestContext();
            context.UserAuthorization = user;
            context.AcceptLanguages = acceptLanguages;
            context.Method =  "GET";
            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;

            if (!this.ExecuteQuery(context))
                this.HandleXmlErrorResponse(context);
            return this.HandleXmlResponse<Person>(context);
        }
        
        /// <summary>
        /// the profile of a user in the network
        /// </summary>
        public Person GetProfileById(
              UserAuthorization user
            , string memberToken
            , string[] acceptLanguages = null
            , FieldSelector<Person> fields = null
        )
        {
            const string urlFormat = "/v1/people/id={MemberToken}{FieldSelector}";
            var url = FormatUrl(urlFormat, fields, "MemberToken", memberToken);

            var context = new RequestContext();
            context.UserAuthorization = user;
            context.AcceptLanguages = acceptLanguages;
            context.Method =  "GET";
            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;

            if (!this.ExecuteQuery(context))
                this.HandleXmlErrorResponse(context);
            return this.HandleXmlResponse<Person>(context);
        }
        
        /// <summary>
        /// the public profile of a user
        /// </summary>
        public Person GetPublicProfile(
              UserAuthorization user
            , string publicProfileUrl
            , string[] acceptLanguages = null
            , FieldSelector<Person> fields = null
        )
        {
            const string urlFormat = "/v1/people/url={PublicProfileUrl}{FieldSelector}";
            var url = FormatUrl(urlFormat, fields, "PublicProfileUrl", publicProfileUrl);

            var context = new RequestContext();
            context.UserAuthorization = user;
            context.AcceptLanguages = acceptLanguages;
            context.Method =  "GET";
            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;

            if (!this.ExecuteQuery(context))
                this.HandleXmlErrorResponse(context);
            return this.HandleXmlResponse<Person>(context);
        }
        
        /// <summary>
        /// returns a list of 1st degree connections for a user 
        /// </summary>
        public Connections GetMyConnections(
              UserAuthorization user
            , FieldSelector<Connections> fields = null
        )
        {
            var url = "/v1/people/~/connections";

            var context = new RequestContext();
            context.UserAuthorization = user;
            context.Method =  "GET";
            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;

            if (!this.ExecuteQuery(context))
                this.HandleXmlErrorResponse(context);
            return this.HandleXmlResponse<Connections>(context);
        }
        
        /// <summary>
        /// returns a list of 1st degree connections for a user 
        /// </summary>
        public Person GetConnectionsByProfileId(
              UserAuthorization user
            , string memberToken
            , FieldSelector<Person> fields = null
        )
        {
            const string urlFormat = "/v1/people/id={MemberToken}/connections";
            var url = FormatUrl(urlFormat, fields, "MemberToken", memberToken);

            var context = new RequestContext();
            context.UserAuthorization = user;
            context.Method =  "GET";
            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;

            if (!this.ExecuteQuery(context))
                this.HandleXmlErrorResponse(context);
            return this.HandleXmlResponse<Person>(context);
        }
        
    }
}

// WriteApiGroup(ApiGroup(N='Companies', M=4, RT=1))
namespace Sparkle.LinkedInNET.Companies
{
    using System;
    using System.Xml.Serialization;
    using Sparkle.LinkedInNET.Internals;

    /// <summary>
    /// Name: 'Companies'
    /// </summary>
    public class CompaniesApi : BaseApi
    {
        internal CompaniesApi(LinkedInApi linkedInApi)
            : base(linkedInApi)
        {
        }
        
        /// <summary>
        /// Hacker Summary
        /// </summary>
        public Company GetList(
              UserAuthorization user
            , FieldSelector<Company> fields = null
        )
        {
            var url = "/v1/companies";

            var context = new RequestContext();
            context.UserAuthorization = user;
            context.Method =  "GET";
            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;

            if (!this.ExecuteQuery(context))
                this.HandleXmlErrorResponse(context);
            return this.HandleXmlResponse<Company>(context);
        }
        
        /// <summary>
        /// retrieve a company by using the company ID
        /// </summary>
        public Company GetById(
              UserAuthorization user
            , string companyId
            , FieldSelector<Company> fields = null
        )
        {
            const string urlFormat = "/v1/companies/{CompanyId}";
            var url = FormatUrl(urlFormat, fields, "CompanyId", companyId);

            var context = new RequestContext();
            context.UserAuthorization = user;
            context.Method =  "GET";
            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;

            if (!this.ExecuteQuery(context))
                this.HandleXmlErrorResponse(context);
            return this.HandleXmlResponse<Company>(context);
        }
        
        /// <summary>
        /// Retrieve a company by universal-name.
        /// </summary>
        public Company GetByName(
              UserAuthorization user
            , string universalName
            , FieldSelector<Company> fields = null
        )
        {
            const string urlFormat = "/v1/companies/universal-name={UniversalName}";
            var url = FormatUrl(urlFormat, fields, "UniversalName", universalName);

            var context = new RequestContext();
            context.UserAuthorization = user;
            context.Method =  "GET";
            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;

            if (!this.ExecuteQuery(context))
                this.HandleXmlErrorResponse(context);
            return this.HandleXmlResponse<Company>(context);
        }
        
        /// <summary>
        /// This returns an array of companies that match to the specified email domain.
        /// </summary>
        public Company GetListByEmailDomain(
              UserAuthorization user
            , string universalName
            , FieldSelector<Company> fields = null
        )
        {
            const string urlFormat = "/v1/companies/universal-name={UniversalName}";
            var url = FormatUrl(urlFormat, fields, "UniversalName", universalName);

            var context = new RequestContext();
            context.UserAuthorization = user;
            context.Method =  "GET";
            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;

            if (!this.ExecuteQuery(context))
                this.HandleXmlErrorResponse(context);
            return this.HandleXmlResponse<Company>(context);
        }
        
    }
}

// WriteApiGroup(ApiGroup(N='Groups', M=0, RT=0))
namespace Sparkle.LinkedInNET.Groups
{
    using System;
    using System.Xml.Serialization;
    using Sparkle.LinkedInNET.Internals;

    /// <summary>
    /// Name: 'Groups'
    /// </summary>
    public class GroupsApi : BaseApi
    {
        internal GroupsApi(LinkedInApi linkedInApi)
            : base(linkedInApi)
        {
        }
        
    }
}

// WriteApiGroup(ApiGroup(N='Jobs', M=0, RT=0))
namespace Sparkle.LinkedInNET.Jobs
{
    using System;
    using System.Xml.Serialization;
    using Sparkle.LinkedInNET.Internals;

    /// <summary>
    /// Name: 'Jobs'
    /// </summary>
    public class JobsApi : BaseApi
    {
        internal JobsApi(LinkedInApi linkedInApi)
            : base(linkedInApi)
        {
        }
        
    }
}

// WriteRootServices()
namespace Sparkle.LinkedInNET
{
    using System;
    using System.Xml.Serialization;
    using Sparkle.LinkedInNET.Internals;
    using Sparkle.LinkedInNET.Profiles;
    using Sparkle.LinkedInNET.Companies;
    using Sparkle.LinkedInNET.Groups;
    using Sparkle.LinkedInNET.Jobs;

    /// <summary>
    /// The factory for LinkedIn APIs.
    /// </summary>
    public partial class LinkedInApi : BaseApi
    {
        /// <summary>
        /// The Profiles API.
        /// </summary>
        public ProfilesApi Profiles{
            get { return new ProfilesApi(this); }
        }

        /// <summary>
        /// The Companies API.
        /// </summary>
        public CompaniesApi Companies{
            get { return new CompaniesApi(this); }
        }

        /// <summary>
        /// The Groups API.
        /// </summary>
        public GroupsApi Groups{
            get { return new GroupsApi(this); }
        }

        /// <summary>
        /// The Jobs API.
        /// </summary>
        public JobsApi Jobs{
            get { return new JobsApi(this); }
        }

    }
}


