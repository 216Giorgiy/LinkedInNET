//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// XML document found at '\src\NET35.Sparkle.LinkedInNET\..\LinkedInApi.xml'
// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='person' CN='Person' F=60))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'person'
    /// </summary>
    [Serializable, XmlRoot("person")]
    public class Person
    {
        /// <summary>
        /// Field: 'first-name' (default)
        /// </summary>
        [XmlElement(ElementName = "first-name")]
        public string Firstname { get; set; }

        /// <summary>
        /// Field: 'last-name' (default)
        /// </summary>
        [XmlElement(ElementName = "last-name")]
        public string Lastname { get; set; }

        /// <summary>
        /// Field: 'headline' (default)
        /// Field: 'headline' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "headline")]
        public string Headline { get; set; }

        /// <summary>
        /// Field: 'site-standard-profile-request/url' (default)
        /// Field: 'site-standard-profile-request' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "site-standard-profile-request")]
        public SiteStandardProfileRequest SiteStandardProfileRequest { get; set; }

        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Field: 'maiden-name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "maiden-name")]
        public string MaidenName { get; set; }

        /// <summary>
        /// Field: 'formatted-name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "formatted-name")]
        public string FormattedName { get; set; }

        /// <summary>
        /// Field: 'phonetic-first-name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "phonetic-first-name")]
        public string PhoneticFirstName { get; set; }

        /// <summary>
        /// Field: 'phonetic-last-name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "phonetic-last-name")]
        public string PhoneticLastName { get; set; }

        /// <summary>
        /// Field: 'formatted-phonetic-name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "formatted-phonetic-name")]
        public string FormattedPhoneticName { get; set; }

        /// <summary>
        /// Field: 'location:(name)' (on-demand)
        /// Field: 'location:(country:(code))' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "location")]
        public Location Location { get; set; }

        /// <summary>
        /// Field: 'industry' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "industry")]
        public string Industry { get; set; }

        /// <summary>
        /// Field: 'distance' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "distance")]
        public int? Distance { get; set; }

        /// <summary>
        /// Field: 'relation-to-viewer' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "relation-to-viewer")]
        public RelationToViewer RelationToViewer { get; set; }

        /// <summary>
        /// Field: 'current-status-timestamp' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "current-status-timestamp")]
        public long? CurrentStatusTimestamp { get; set; }

        /// <summary>
        /// Field: 'current-share' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "current-share")]
        public Share CurrentShare { get; set; }

        /// <summary>
        /// Field: 'num-connections' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "num-connections")]
        public int NumConnections { get; set; }

        /// <summary>
        /// Field: 'num-connections-capped' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "num-connections-capped")]
        public bool? NumConnectionsCapped { get; set; }

        /// <summary>
        /// Field: 'summary' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "summary")]
        public string Summary { get; set; }

        /// <summary>
        /// Field: 'specialties' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "specialties")]
        public string Specialties { get; set; }

        /// <summary>
        /// Field: 'positions' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "positions")]
        public PersonPositions Positions { get; set; }

        /// <summary>
        /// Field: 'picture-url' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "picture-url")]
        public string PictureUrl { get; set; }

        /// <summary>
        /// Field: 'api-standard-profile-request' (on-demand)
        /// Field: 'api-standard-profile-request:(url)'
        /// Field: 'api-standard-profile-request:(headers)'
        /// </summary>
        [XmlElement(ElementName = "api-standard-profile-request")]
        public ProfileRequest ApiStandardProfileRequest { get; set; }

        /// <summary>
        /// Field: 'public-profile-url' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "public-profile-url")]
        public string PublicProfileUrl { get; set; }

        /// <summary>
        /// Field: 'email-address' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "email-address")]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Field: 'last-modified-timestamp' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "last-modified-timestamp")]
        public string LastModifiedTimestamp { get; set; }

        /// <summary>
        /// Field: 'proposal-comments' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "proposal-comments")]
        public string ProposalComments { get; set; }

        /// <summary>
        /// Field: 'associations' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "associations")]
        public string Associations { get; set; }

        /// <summary>
        /// Field: 'interests' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "interests")]
        public string Interests { get; set; }

        /// <summary>
        /// Field: 'publications' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "publications")]
        public Publications Publications { get; set; }

        /// <summary>
        /// Field: 'patents' (on-demand)
        /// Field: 'patents:(id,title,summary,number,status:(id,name),office:(name),inventors:(id,name,person),date,url)'
        /// </summary>
        [XmlElement(ElementName = "patents")]
        public Patents Patents { get; set; }

        /// <summary>
        /// Field: 'languages' (on-demand)
        /// Field: 'languages:(id)'
        /// Field: 'languages:(language)'
        /// Field: 'languages:(proficiency)'
        /// </summary>
        [XmlElement(ElementName = "languages")]
        public Languages Languages { get; set; }

        /// <summary>
        /// Field: 'skills' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "skills")]
        public Skills Skills { get; set; }

        /// <summary>
        /// Field: 'certifications' (on-demand)
        /// Field: 'certifications:(id,name,authority:(name),number,start-date,end-date)'
        /// </summary>
        [XmlElement(ElementName = "certifications")]
        public Certifications Certifications { get; set; }

        /// <summary>
        /// Field: 'educations' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "educations")]
        public Educations Educations { get; set; }

        /// <summary>
        /// Field: 'courses' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "courses")]
        public Courses Courses { get; set; }

        /// <summary>
        /// Field: 'volunteer' (on-demand)
        /// Field: 'volunteer:(volunteer-experiences:(id,role,organization:(name),cause:(name)))'
        /// </summary>
        [XmlElement(ElementName = "volunteer")]
        public Volunteer Volunteer { get; set; }

        /// <summary>
        /// Field: 'three-current-positions' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "three-current-positions")]
        public PersonPositions ThreeCurrentPositions { get; set; }

        /// <summary>
        /// Field: 'three-past-positions' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "three-past-positions")]
        public PersonPositions ThreePastPositions { get; set; }

        /// <summary>
        /// Field: 'num-recommenders' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "num-recommenders")]
        public string NumRecommenders { get; set; }

        /// <summary>
        /// Field: 'recommendations-received' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "recommendations-received")]
        public Recommendations RecommendationsReceived { get; set; }

        /// <summary>
        /// Field: 'following' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "following")]
        public FollowingInfos Following { get; set; }

        /// <summary>
        /// Field: 'job-bookmarks' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "job-bookmarks")]
        public JobBookmarks JobBookmarks { get; set; }

        /// <summary>
        /// Field: 'suggestions' (on-demand)
        /// </summary>
        ////[XmlElement(ElementName = "suggestions")]
        public string Suggestions { get; set; }

        /// <summary>
        /// Field: 'date-of-birth' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "date-of-birth")]
        public DateParts DateOfBirth { get; set; }

        /// <summary>
        /// Field: 'member-url-resources' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "member-url-resources")]
        public UrlResources MemberUrlResources { get; set; }

        /// <summary>
        /// Field: 'related-profile-views' (on-demand)
        /// </summary>
        ////[XmlElement(ElementName = "related-profile-views")]
        public string RelatedProfileViews { get; set; }

        /// <summary>
        /// Field: 'honors-awards' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "honors-awards")]
        public HonorsAwards HonorsAwards { get; set; }

        /// <summary>
        /// Field: 'phone-numbers' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "phone-numbers")]
        public PhoneNumbers PhoneNumbers { get; set; }

        /// <summary>
        /// Field: 'bound-account-types' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "bound-account-types")]
        public string BoundAccountTypes { get; set; }

        /// <summary>
        /// Field: 'im-accounts' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "im-accounts")]
        public ImAccounts ImAccounts { get; set; }

        /// <summary>
        /// Field: 'main-address' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "main-address")]
        public string MainAddress { get; set; }

        /// <summary>
        /// Field: 'twitter-accounts' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "twitter-accounts")]
        public TwitterAccounts TwitterAccounts { get; set; }

        /// <summary>
        /// Field: 'primary-twitter-account' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "primary-twitter-account")]
        public TwitterAccount PrimaryTwitterAccount { get; set; }

        /// <summary>
        /// Field: 'connections' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "connections")]
        public string Connections { get; set; }

        /// <summary>
        /// Field: 'group-memberships' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "group-memberships")]
        public string GroupMemberships { get; set; }

        /// <summary>
        /// Field: 'network' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "network")]
        public string Network { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='connections' CN='Connections' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'connections'
    /// </summary>
    [Serializable, XmlRoot("connections")]
    public class Connections
    {
        /// <summary>
        /// Field: 'person' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "person")]
        public List<Person> Person { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='share' CN='' F=7))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'share'
    /// </summary>
    [Serializable, XmlRoot("share")]
    public class Share
    {
        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Field: 'timestamp' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "timestamp")]
        public long Timestamp { get; set; }

        /// <summary>
        /// Field: 'comment' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "comment")]
        public string Comment { get; set; }

        /// <summary>
        /// Field: 'content' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "content")]
        public ShareContent Content { get; set; }

        /// <summary>
        /// Field: 'visibility/code' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "visibility")]
        public Visibility Visibility { get; set; }

        /// <summary>
        /// Field: 'source' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "source")]
        public ShareSource Source { get; set; }

        /// <summary>
        /// Field: 'author' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "author")]
        public ShareAuthor Author { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='ShareSource' CN='ShareSource' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'ShareSource'
    /// </summary>
    [Serializable, XmlRoot("ShareSource")]
    public class ShareSource
    {
        /// <summary>
        /// Field: 'service-provider' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "service-provider")]
        public ShareSourceProvider ServiceProvider { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='ShareSourceProvider' CN='ShareSourceProvider' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'ShareSourceProvider'
    /// </summary>
    [Serializable, XmlRoot("ShareSourceProvider")]
    public class ShareSourceProvider
    {
        /// <summary>
        /// Field: 'name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "name")]
        public string Name { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='ShareContent' CN='ShareContent' F=4))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'ShareContent'
    /// </summary>
    [Serializable, XmlRoot("ShareContent")]
    public class ShareContent
    {
        /// <summary>
        /// Field: 'title' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "title")]
        public string Title { get; set; }

        /// <summary>
        /// Field: 'submitted-url' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "submitted-url")]
        public string SubmittedUrl { get; set; }

        /// <summary>
        /// Field: 'submitted-image-url' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "submitted-image-url")]
        public string SubmittedImageUrl { get; set; }

        /// <summary>
        /// Field: 'description' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "description")]
        public string Description { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='ShareAuthor' CN='' F=3))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'ShareAuthor'
    /// </summary>
    [Serializable, XmlRoot("ShareAuthor")]
    public class ShareAuthor
    {
        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Field: 'first-name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "first-name")]
        public string FirstName { get; set; }

        /// <summary>
        /// Field: 'last-name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "last-name")]
        public string LastName { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='position' CN='PersonPosition' F=7))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'position'
    /// </summary>
    [Serializable, XmlRoot("position")]
    public class PersonPosition
    {
        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        public int Id { get; set; }

        /// <summary>
        /// Field: 'title' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "title")]
        public string Title { get; set; }

        /// <summary>
        /// Field: 'summary' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "summary")]
        public string Summary { get; set; }

        /// <summary>
        /// Field: 'start-date' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "start-date")]
        public DateParts StartDate { get; set; }

        /// <summary>
        /// Field: 'end-date' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "end-date")]
        public DateParts EndDate { get; set; }

        /// <summary>
        /// Field: 'is-current' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "is-current")]
        public bool IsCurrent { get; set; }

        /// <summary>
        /// Field: 'company' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "company")]
        public CompanyIdentifier Company { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='positions' CN='PersonPositions' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'positions'
    /// </summary>
    [Serializable, XmlRoot("positions")]
    public class PersonPositions
    {
        /// <summary>
        /// Field: 'position' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "position")]
        public List<PersonPosition> Position { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='CompanyIdentifier' CN='CompanyIdentifier' F=5))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'CompanyIdentifier'
    /// </summary>
    [Serializable, XmlRoot("CompanyIdentifier")]
    public class CompanyIdentifier
    {
        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        public int Id { get; set; }

        /// <summary>
        /// Field: 'name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Field: 'type' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Field: 'industry' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "industry")]
        public string Industry { get; set; }

        /// <summary>
        /// Field: 'ticker' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "ticker")]
        public string Ticker { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='DateParts' CN='DateParts' F=3))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'DateParts'
    /// </summary>
    [Serializable, XmlRoot("DateParts")]
    public class DateParts
    {
        /// <summary>
        /// Field: 'year' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "year")]
        public short? Year { get; set; }

        /// <summary>
        /// Field: 'month' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "month")]
        public short? Month { get; set; }

        /// <summary>
        /// Field: 'day' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "day")]
        public short? Day { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='relation-to-viewer' CN='' F=3))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'relation-to-viewer'
    /// </summary>
    [Serializable, XmlRoot("relation-to-viewer")]
    public class RelationToViewer
    {
        /// <summary>
        /// Field: 'distance' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "distance")]
        public int? Distance { get; set; }

        /// <summary>
        /// Field: 'related-connections' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "related-connections")]
        public string RelatedConnections { get; set; }

        /// <summary>
        /// Field: 'connections' (on-demand)
        /// </summary>
        ////[XmlElement(ElementName = "connections")]
        public int? Connections { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='languages' CN='Languages' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'languages'
    /// </summary>
    [Serializable, XmlRoot("languages")]
    public class Languages
    {
        /// <summary>
        /// Field: 'language' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "language")]
        public List<Language> Language { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='language' CN='Language' F=3))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'language'
    /// </summary>
    [Serializable, XmlRoot("language")]
    public class Language
    {
        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        public int Id { get; set; }

        /// <summary>
        /// Field: 'language' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "language")]
        public LanguageInfo LanguageInfo { get; set; }

        /// <summary>
        /// Field: 'proficiency' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "proficiency")]
        public LanguageProficiency Proficiency { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='LanguageInfo' CN='LanguageInfo' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'LanguageInfo'
    /// </summary>
    [Serializable, XmlRoot("LanguageInfo")]
    public class LanguageInfo
    {
        /// <summary>
        /// Field: 'name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "name")]
        public string Name { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='LanguageProficiency' CN='LanguageProficiency' F=2))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'LanguageProficiency'
    /// </summary>
    [Serializable, XmlRoot("LanguageProficiency")]
    public class LanguageProficiency
    {
        /// <summary>
        /// Field: 'level' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "level")]
        public string Level { get; set; }

        /// <summary>
        /// Field: 'name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "name")]
        public string Name { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='skills' CN='Skills' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'skills'
    /// </summary>
    [Serializable, XmlRoot("skills")]
    public class Skills
    {
        /// <summary>
        /// Field: 'skill' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "skill")]
        public List<Skill> Skill { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='skill' CN='Skill' F=2))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'skill'
    /// </summary>
    [Serializable, XmlRoot("skill")]
    public class Skill
    {
        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Field: 'skill' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "skill")]
        public SkillName SkillName { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='skill' CN='SkillName' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'skill'
    /// </summary>
    [Serializable, XmlRoot("skill")]
    public class SkillName
    {
        /// <summary>
        /// Field: 'name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "name")]
        public string Name { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='certifications' CN='Certifications' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'certifications'
    /// </summary>
    [Serializable, XmlRoot("certifications")]
    public class Certifications
    {
        /// <summary>
        /// Field: 'certification' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "certification")]
        public List<Certification> Certification { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='certification' CN='Certification' F=6))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'certification'
    /// </summary>
    [Serializable, XmlRoot("certification")]
    public class Certification
    {
        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        public int Id { get; set; }

        /// <summary>
        /// Field: 'name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Field: 'authority:(name)' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "authority")]
        public Authority Authority { get; set; }

        /// <summary>
        /// Field: 'number' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "number")]
        public string Number { get; set; }

        /// <summary>
        /// Field: 'start-date' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "start-date")]
        public DateParts StartDate { get; set; }

        /// <summary>
        /// Field: 'end-date' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "end-date")]
        public DateParts EndDate { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='educations' CN='Educations' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'educations'
    /// </summary>
    [Serializable, XmlRoot("educations")]
    public class Educations
    {
        /// <summary>
        /// Field: 'education' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "education")]
        public List<Education> Education { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='education' CN='Education' F=8))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'education'
    /// </summary>
    [Serializable, XmlRoot("education")]
    public class Education
    {
        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        public long Id { get; set; }

        /// <summary>
        /// Field: 'school-name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "school-name")]
        public string SchoolName { get; set; }

        /// <summary>
        /// Field: 'notes' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "notes")]
        public string Notes { get; set; }

        /// <summary>
        /// Field: 'activities' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "activities")]
        public string Activities { get; set; }

        /// <summary>
        /// Field: 'field-of-study' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "field-of-study")]
        public string FieldOfStudy { get; set; }

        /// <summary>
        /// Field: 'degree' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "degree")]
        public string Degree { get; set; }

        /// <summary>
        /// Field: 'start-date' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "start-date")]
        public DateParts StartDate { get; set; }

        /// <summary>
        /// Field: 'end-date' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "end-date")]
        public DateParts EndDate { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='courses' CN='Courses' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'courses'
    /// </summary>
    [Serializable, XmlRoot("courses")]
    public class Courses
    {
        /// <summary>
        /// Field: 'course' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "course")]
        public List<Course> Course { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='course' CN='Course' F=3))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'course'
    /// </summary>
    [Serializable, XmlRoot("course")]
    public class Course
    {
        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Field: 'name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Field: 'number' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "number")]
        public string Number { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='volunteer' CN='Volunteer' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'volunteer'
    /// </summary>
    [Serializable, XmlRoot("volunteer")]
    public class Volunteer
    {
        /// <summary>
        /// Field: 'volunteer-experiences' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "volunteer-experiences")]
        public VolunteerExperiences VolunteerExperiences { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='volunteer-experiences' CN='VolunteerExperiences' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'volunteer-experiences'
    /// </summary>
    [Serializable, XmlRoot("volunteer-experiences")]
    public class VolunteerExperiences
    {
        /// <summary>
        /// Field: 'volunteer-experience' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "volunteer-experience")]
        public List<VolunteerExperience> VolunteerExperience { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='volunteer-experience' CN='VolunteerExperience' F=4))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'volunteer-experience'
    /// </summary>
    [Serializable, XmlRoot("volunteer-experience")]
    public class VolunteerExperience
    {
        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        public int Id { get; set; }

        /// <summary>
        /// Field: 'role' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "role")]
        public string Role { get; set; }

        /// <summary>
        /// Field: 'organization:(name)' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "organization")]
        public Organization Organization { get; set; }

        /// <summary>
        /// Field: 'cause:(name)' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "cause")]
        public Cause Cause { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='recommendations' CN='Recommendations' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'recommendations'
    /// </summary>
    [Serializable, XmlRoot("recommendations")]
    public class Recommendations
    {
        /// <summary>
        /// Field: 'recommendation' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "recommendation")]
        public List<Recommendation> Recommendation { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='recommendation' CN='Recommendation' F=4))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'recommendation'
    /// </summary>
    [Serializable, XmlRoot("recommendation")]
    public class Recommendation
    {
        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Field: 'recommendation-type' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "recommendation-type")]
        public string RecommendationType { get; set; }

        /// <summary>
        /// Field: 'recommendation-text' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "recommendation-text")]
        public string RecommendationText { get; set; }

        /// <summary>
        /// Field: 'recommender' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "recommender")]
        public string Recommender { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='phone-numbers' CN='PhoneNumbers' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'phone-numbers'
    /// </summary>
    [Serializable, XmlRoot("phone-numbers")]
    public class PhoneNumbers
    {
        /// <summary>
        /// Field: 'phone-number' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "phone-number")]
        public List<PhoneNumber> PhoneNumber { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='phone-number' CN='PhoneNumber' F=2))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'phone-number'
    /// </summary>
    [Serializable, XmlRoot("phone-number")]
    public class PhoneNumber
    {
        /// <summary>
        /// Field: 'phone-type' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "phone-type")]
        public string Type { get; set; }

        /// <summary>
        /// Field: 'phone-number' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "phone-number")]
        public string Number { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='publications' CN='Publications' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'publications'
    /// </summary>
    [Serializable, XmlRoot("publications")]
    public class Publications
    {
        /// <summary>
        /// Field: 'publication' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "publication")]
        public List<Publication> Publication { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='publication' CN='Publication' F=9))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'publication'
    /// </summary>
    [Serializable, XmlRoot("publication")]
    public class Publication
    {
        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Field: 'title' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "title")]
        public string Title { get; set; }

        /// <summary>
        /// Field: 'publisher:(name)' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "publisher")]
        public Publisher Publisher { get; set; }

        /// <summary>
        /// Field: 'authors:(id)' (on-demand)
        /// Field: 'authors:(name)' (on-demand)
        /// Field: 'authors:(person)' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "authors")]
        public Authors Authors { get; set; }

        /// <summary>
        /// Field: 'date' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "date")]
        public DateParts Date { get; set; }

        /// <summary>
        /// Field: 'url' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "url")]
        public string Url { get; set; }

        /// <summary>
        /// Field: 'summary' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "summary")]
        public string Summary { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='patents' CN='Patents' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'patents'
    /// </summary>
    [Serializable, XmlRoot("patents")]
    public class Patents
    {
        /// <summary>
        /// Field: 'patent' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "patent")]
        public List<Patent> Patent { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='patent' CN='Patent' F=9))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'patent'
    /// </summary>
    [Serializable, XmlRoot("patent")]
    public class Patent
    {
        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        public int Id { get; set; }

        /// <summary>
        /// Field: 'title' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "title")]
        public string Title { get; set; }

        /// <summary>
        /// Field: 'date' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "date")]
        public DateParts Date { get; set; }

        /// <summary>
        /// Field: 'url' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "url")]
        public string Url { get; set; }

        /// <summary>
        /// Field: 'summary' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "summary")]
        public string Summary { get; set; }

        /// <summary>
        /// Field: 'number' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "number")]
        public string Number { get; set; }

        /// <summary>
        /// Field: 'status' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "status")]
        public Status Status { get; set; }

        /// <summary>
        /// Field: 'office:(name)' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "office")]
        public Office Office { get; set; }

        /// <summary>
        /// Field: 'inventors' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "inventors")]
        public Inventors Inventors { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='status' CN='Status' F=2))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'status'
    /// </summary>
    [Serializable, XmlRoot("status")]
    public class Status
    {
        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        public int Id { get; set; }

        /// <summary>
        /// Field: 'name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "name")]
        public string Name { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='inventors' CN='Inventors' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'inventors'
    /// </summary>
    [Serializable, XmlRoot("inventors")]
    public class Inventors
    {
        /// <summary>
        /// Field: 'inventor' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "inventor")]
        public List<Inventor> Inventor { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='inventor' CN='Inventor' F=3))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'inventor'
    /// </summary>
    [Serializable, XmlRoot("inventor")]
    public class Inventor
    {
        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        public int Id { get; set; }

        /// <summary>
        /// Field: 'name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Field: 'person' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "person")]
        public InventorPerson Person { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='person' CN='InventorPerson' F=3))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'person'
    /// </summary>
    [Serializable, XmlRoot("person")]
    public class InventorPerson
    {
        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Field: 'first-name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "first-name")]
        public string FirstName { get; set; }

        /// <summary>
        /// Field: 'last-name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "last-name")]
        public string LastName { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='member-url-resources' CN='UrlResources' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'member-url-resources'
    /// </summary>
    [Serializable, XmlRoot("member-url-resources")]
    public class UrlResources
    {
        /// <summary>
        /// Field: 'member-url-resource' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "member-url-resource")]
        public List<UrlResource> MemberUrlResource { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='member-url-resource' CN='UrlResource' F=2))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'member-url-resource'
    /// </summary>
    [Serializable, XmlRoot("member-url-resource")]
    public class UrlResource
    {
        /// <summary>
        /// Field: 'url' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "url")]
        public string Url { get; set; }

        /// <summary>
        /// Field: 'name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "name")]
        public string Name { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='ProfileRequest' CN='' F=2))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'ProfileRequest'
    /// </summary>
    [Serializable, XmlRoot("ProfileRequest")]
    public class ProfileRequest
    {
        /// <summary>
        /// Field: 'url' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "url")]
        public string Url { get; set; }

        /// <summary>
        /// Field: 'headers' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "headers")]
        public RequestHeaders Headers { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='headers' CN='RequestHeaders' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'headers'
    /// </summary>
    [Serializable, XmlRoot("headers")]
    public class RequestHeaders
    {
        /// <summary>
        /// Field: 'http-header' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "http-header")]
        public List<RequestHeader> HttpHeader { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='http-header' CN='RequestHeader' F=2))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'http-header'
    /// </summary>
    [Serializable, XmlRoot("http-header")]
    public class RequestHeader
    {
        /// <summary>
        /// Field: 'name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Field: 'value' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "value")]
        public string Value { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='FollowingInfos' CN='' F=4))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'FollowingInfos'
    /// </summary>
    [Serializable, XmlRoot("FollowingInfos")]
    public class FollowingInfos
    {
        /// <summary>
        /// Field: 'people' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "people")]
        public FollowingInfosPeople People { get; set; }

        /// <summary>
        /// Field: 'companies' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "companies")]
        public FollowingInfosCompanies Companies { get; set; }

        /// <summary>
        /// Field: 'industries' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "industries")]
        public FollowingInfosIndustries Industries { get; set; }

        /// <summary>
        /// Field: 'special-editions' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "special-editions")]
        public FollowingInfosSpecialEditions SpecialEditions { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='FollowingInfosPeople' CN='' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'FollowingInfosPeople'
    /// </summary>
    [Serializable, XmlRoot("FollowingInfosPeople")]
    public class FollowingInfosPeople
    {
        /// <summary>
        /// Field: 'total' (on-demand)
        /// </summary>
        [XmlAttribute(AttributeName = "total")]
        public string Total { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='FollowingInfosCompanies' CN='' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'FollowingInfosCompanies'
    /// </summary>
    [Serializable, XmlRoot("FollowingInfosCompanies")]
    public class FollowingInfosCompanies
    {
        /// <summary>
        /// Field: 'total' (on-demand)
        /// </summary>
        [XmlAttribute(AttributeName = "total")]
        public string Total { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='FollowingInfosIndustries' CN='' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'FollowingInfosIndustries'
    /// </summary>
    [Serializable, XmlRoot("FollowingInfosIndustries")]
    public class FollowingInfosIndustries
    {
        /// <summary>
        /// Field: 'total' (on-demand)
        /// </summary>
        [XmlAttribute(AttributeName = "total")]
        public string Total { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='FollowingInfosSpecialEditions' CN='' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'FollowingInfosSpecialEditions'
    /// </summary>
    [Serializable, XmlRoot("FollowingInfosSpecialEditions")]
    public class FollowingInfosSpecialEditions
    {
        /// <summary>
        /// Field: 'total' (on-demand)
        /// </summary>
        [XmlAttribute(AttributeName = "total")]
        public string Total { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='job-bookmarks' CN='JobBookmarks' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'job-bookmarks'
    /// </summary>
    [Serializable, XmlRoot("job-bookmarks")]
    public class JobBookmarks
    {
        /// <summary>
        /// Field: 'total' (on-demand)
        /// </summary>
        [XmlAttribute(AttributeName = "total")]
        public string Total { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='honors-awards' CN='HonorsAwards' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'honors-awards'
    /// </summary>
    [Serializable, XmlRoot("honors-awards")]
    public class HonorsAwards
    {
        /// <summary>
        /// Field: 'honor-award' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "honor-award")]
        public List<HonorAward> HonorAward { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='honor-award' CN='HonorAward' F=3))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'honor-award'
    /// </summary>
    [Serializable, XmlRoot("honor-award")]
    public class HonorAward
    {
        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Field: 'name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Field: 'issuer' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "issuer")]
        public string Issuer { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='twitter-accounts' CN='TwitterAccounts' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'twitter-accounts'
    /// </summary>
    [Serializable, XmlRoot("twitter-accounts")]
    public class TwitterAccounts
    {
        /// <summary>
        /// Field: 'twitter-account' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "twitter-account")]
        public List<TwitterAccount> TwitterAccount { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='twitter-account' CN='TwitterAccount' F=2))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'twitter-account'
    /// </summary>
    [Serializable, XmlRoot("twitter-account")]
    public class TwitterAccount
    {
        /// <summary>
        /// Field: 'provider-account-id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "provider-account-id")]
        public long ProviderAccountId { get; set; }

        /// <summary>
        /// Field: 'provider-account-name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "provider-account-name")]
        public string ProviderAccountName { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='im-accounts' CN='ImAccounts' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'im-accounts'
    /// </summary>
    [Serializable, XmlRoot("im-accounts")]
    public class ImAccounts
    {
        /// <summary>
        /// Field: 'im-account' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "im-account")]
        public List<ImAccount> ImAccount { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='im-account' CN='ImAccount' F=3))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'im-account'
    /// </summary>
    [Serializable, XmlRoot("im-account")]
    public class ImAccount
    {
        /// <summary>
        /// Field: 'im-account-type' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "im-account-type")]
        public string ImAccountType { get; set; }

        /// <summary>
        /// Field: 'im-account-name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "im-account-name")]
        public string ImAccountName { get; set; }

        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        public int Id { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='site-standard-profile-request' CN='SiteStandardProfileRequest' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'site-standard-profile-request'
    /// </summary>
    [Serializable, XmlRoot("site-standard-profile-request")]
    public class SiteStandardProfileRequest
    {
        /// <summary>
        /// Field: 'url' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "url")]
        public string Url { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='location' CN='Location' F=2))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'location'
    /// </summary>
    [Serializable, XmlRoot("location")]
    public class Location
    {
        /// <summary>
        /// Field: 'name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Field: 'country' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "country")]
        public Country Country { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='country' CN='Country' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'country'
    /// </summary>
    [Serializable, XmlRoot("country")]
    public class Country
    {
        /// <summary>
        /// Field: 'code' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "code")]
        public string Code { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='visibility' CN='Visibility' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'visibility'
    /// </summary>
    [Serializable, XmlRoot("visibility")]
    public class Visibility
    {
        /// <summary>
        /// Field: 'code' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "code")]
        public string Code { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='authority' CN='Authority' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'authority'
    /// </summary>
    [Serializable, XmlRoot("authority")]
    public class Authority
    {
        /// <summary>
        /// Field: 'name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "name")]
        public string Name { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='organization' CN='Organization' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'organization'
    /// </summary>
    [Serializable, XmlRoot("organization")]
    public class Organization
    {
        /// <summary>
        /// Field: 'name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "name")]
        public string Name { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='cause' CN='Cause' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'cause'
    /// </summary>
    [Serializable, XmlRoot("cause")]
    public class Cause
    {
        /// <summary>
        /// Field: 'name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "name")]
        public string Name { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='publisher' CN='Publisher' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'publisher'
    /// </summary>
    [Serializable, XmlRoot("publisher")]
    public class Publisher
    {
        /// <summary>
        /// Field: 'name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "name")]
        public string Name { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='authors' CN='Authors' F=3))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'authors'
    /// </summary>
    [Serializable, XmlRoot("authors")]
    public class Authors
    {
        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Field: 'name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Field: 'person' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "person")]
        public string Person { get; set; }

    }
}

// WriteReturnTypes(ApiGroup(N='Profiles', M=5, RT=67), ReturnType(N='office' CN='Office' F=1))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'office'
    /// </summary>
    [Serializable, XmlRoot("office")]
    public class Office
    {
        /// <summary>
        /// Field: 'name' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "name")]
        public string Name { get; set; }

    }
}

// WriteReturnTypeFields(ApiGroup(N='Profiles', M=5, RT=67))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Field selectors for the 'person', 'connections', 'share', 'ShareSource', 'ShareSourceProvider', 'ShareContent', 'ShareAuthor', 'position', 'positions', 'CompanyIdentifier', 'DateParts', 'relation-to-viewer', 'languages', 'language', 'LanguageInfo', 'LanguageProficiency', 'skills', 'skill', 'skill', 'certifications', 'certification', 'educations', 'education', 'courses', 'course', 'volunteer', 'volunteer-experiences', 'volunteer-experience', 'recommendations', 'recommendation', 'phone-numbers', 'phone-number', 'publications', 'publication', 'patents', 'patent', 'status', 'inventors', 'inventor', 'person', 'member-url-resources', 'member-url-resource', 'ProfileRequest', 'headers', 'http-header', 'FollowingInfos', 'FollowingInfosPeople', 'FollowingInfosCompanies', 'FollowingInfosIndustries', 'FollowingInfosSpecialEditions', 'job-bookmarks', 'honors-awards', 'honor-award', 'twitter-accounts', 'twitter-account', 'im-accounts', 'im-account', 'site-standard-profile-request', 'location', 'country', 'visibility', 'authority', 'organization', 'cause', 'publisher', 'authors', 'office' return types.
    /// </summary>
    public static class ProfilesFields {
        /// <summary>
        /// Includes the field 'first-name'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithFirstName(this FieldSelector<Person> me) { return me.Add("first-name"); }
        
        /// <summary>
        /// Includes the field 'last-name'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithLastName(this FieldSelector<Person> me) { return me.Add("last-name"); }
        
        /// <summary>
        /// Includes the field 'headline'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithHeadline(this FieldSelector<Person> me) { return me.Add("headline"); }
        
        /// <summary>
        /// Includes the field 'site-standard-profile-request'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithSiteStandardProfileRequestUrl(this FieldSelector<Person> me) { return me.Add("site-standard-profile-request"); }
        
        /// <summary>
        /// Includes the field 'id'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithId(this FieldSelector<Person> me) { return me.Add("id"); }
        
        /// <summary>
        /// Includes the field 'maiden-name'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithMaidenName(this FieldSelector<Person> me) { return me.Add("maiden-name"); }
        
        /// <summary>
        /// Includes the field 'formatted-name'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithFormattedName(this FieldSelector<Person> me) { return me.Add("formatted-name"); }
        
        /// <summary>
        /// Includes the field 'phonetic-first-name'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithPhoneticFirstName(this FieldSelector<Person> me) { return me.Add("phonetic-first-name"); }
        
        /// <summary>
        /// Includes the field 'phonetic-last-name'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithPhoneticLastName(this FieldSelector<Person> me) { return me.Add("phonetic-last-name"); }
        
        /// <summary>
        /// Includes the field 'formatted-phonetic-name'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithFormattedPhoneticName(this FieldSelector<Person> me) { return me.Add("formatted-phonetic-name"); }
        
        /// <summary>
        /// Includes the field 'location:(name)'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithLocationName(this FieldSelector<Person> me) { return me.Add("location:(name)"); }
        
        /// <summary>
        /// Includes the field 'location:(country:(code))'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithLocationCountryCode(this FieldSelector<Person> me) { return me.Add("location:(country:(code))"); }
        
        /// <summary>
        /// Includes the field 'industry'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithIndustry(this FieldSelector<Person> me) { return me.Add("industry"); }
        
        /// <summary>
        /// Includes the field 'distance'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithDistance(this FieldSelector<Person> me) { return me.Add("distance"); }
        
        /// <summary>
        /// Includes the field 'relation-to-viewer'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithRelationToViewer(this FieldSelector<Person> me) { return me.Add("relation-to-viewer"); }
        
        /// <summary>
        /// Includes the field 'current-status-timestamp'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithCurrentStatusTimestamp(this FieldSelector<Person> me) { return me.Add("current-status-timestamp"); }
        
        /// <summary>
        /// Includes the field 'current-share'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithCurrentShare(this FieldSelector<Person> me) { return me.Add("current-share"); }
        
        /// <summary>
        /// Includes the field 'num-connections'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithNumConnections(this FieldSelector<Person> me) { return me.Add("num-connections"); }
        
        /// <summary>
        /// Includes the field 'num-connections-capped'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithNumConnectionsCapped(this FieldSelector<Person> me) { return me.Add("num-connections-capped"); }
        
        /// <summary>
        /// Includes the field 'summary'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithSummary(this FieldSelector<Person> me) { return me.Add("summary"); }
        
        /// <summary>
        /// Includes the field 'specialties'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithSpecialties(this FieldSelector<Person> me) { return me.Add("specialties"); }
        
        /// <summary>
        /// Includes the field 'positions'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithPositions(this FieldSelector<Person> me) { return me.Add("positions"); }
        
        /// <summary>
        /// Includes the field 'picture-url'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithPictureUrl(this FieldSelector<Person> me) { return me.Add("picture-url"); }
        
        /// <summary>
        /// Includes the field 'site-standard-profile-request'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithSiteStandardProfileRequest(this FieldSelector<Person> me) { return me.Add("site-standard-profile-request"); }
        
        /// <summary>
        /// Includes the field 'api-standard-profile-request:(url)'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithApiStandardProfileRequestUrl(this FieldSelector<Person> me) { return me.Add("api-standard-profile-request:(url)"); }
        
        /// <summary>
        /// Includes the field 'api-standard-profile-request:(headers)'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithApiStandardProfileRequestHeaders(this FieldSelector<Person> me) { return me.Add("api-standard-profile-request:(headers)"); }
        
        /// <summary>
        /// Includes the field 'public-profile-url'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithPublicProfileUrl(this FieldSelector<Person> me) { return me.Add("public-profile-url"); }
        
        /// <summary>
        /// Includes the field 'email-address'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithEmailAddress(this FieldSelector<Person> me) { return me.Add("email-address"); }
        
        /// <summary>
        /// Includes the field 'last-modified-timestamp'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithLastModifiedTimestamp(this FieldSelector<Person> me) { return me.Add("last-modified-timestamp"); }
        
        /// <summary>
        /// Includes the field 'proposal-comments'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithProposalComments(this FieldSelector<Person> me) { return me.Add("proposal-comments"); }
        
        /// <summary>
        /// Includes the field 'associations'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithAssociations(this FieldSelector<Person> me) { return me.Add("associations"); }
        
        /// <summary>
        /// Includes the field 'interests'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithInterests(this FieldSelector<Person> me) { return me.Add("interests"); }
        
        /// <summary>
        /// Includes the field 'publications'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithPublications(this FieldSelector<Person> me) { return me.Add("publications"); }
        
        /// <summary>
        /// Includes the field 'patents:(id,title,summary,number,status:(id,name),office:(name),inventors:(id,name,person),date,url)'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithPatents(this FieldSelector<Person> me) { return me.Add("patents:(id,title,summary,number,status:(id,name),office:(name),inventors:(id,name,person),date,url)"); }
        
        /// <summary>
        /// Includes the field 'languages:(id)'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithLanguageId(this FieldSelector<Person> me) { return me.Add("languages:(id)"); }
        
        /// <summary>
        /// Includes the field 'languages:(language)'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithLanguageName(this FieldSelector<Person> me) { return me.Add("languages:(language)"); }
        
        /// <summary>
        /// Includes the field 'languages:(proficiency)'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithLanguageProficiency(this FieldSelector<Person> me) { return me.Add("languages:(proficiency)"); }
        
        /// <summary>
        /// Includes the field 'skills'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithSkills(this FieldSelector<Person> me) { return me.Add("skills"); }
        
        /// <summary>
        /// Includes the field 'certifications:(id,name,authority:(name),number,start-date,end-date)'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithCertifications(this FieldSelector<Person> me) { return me.Add("certifications:(id,name,authority:(name),number,start-date,end-date)"); }
        
        /// <summary>
        /// Includes the field 'educations'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithEducations(this FieldSelector<Person> me) { return me.Add("educations"); }
        
        /// <summary>
        /// Includes the field 'courses'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithCourses(this FieldSelector<Person> me) { return me.Add("courses"); }
        
        /// <summary>
        /// Includes the field 'volunteer:(volunteer-experiences:(id,role,organization:(name),cause:(name)))'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithFullVolunteer(this FieldSelector<Person> me) { return me.Add("volunteer:(volunteer-experiences:(id,role,organization:(name),cause:(name)))"); }
        
        /// <summary>
        /// Includes the field 'three-current-positions'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithThreeCurrentPositions(this FieldSelector<Person> me) { return me.Add("three-current-positions"); }
        
        /// <summary>
        /// Includes the field 'three-past-positions'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithThreePastPositions(this FieldSelector<Person> me) { return me.Add("three-past-positions"); }
        
        /// <summary>
        /// Includes the field 'num-recommenders'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithNumRecommenders(this FieldSelector<Person> me) { return me.Add("num-recommenders"); }
        
        /// <summary>
        /// Includes the field 'recommendations-received'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithRecommendationsReceived(this FieldSelector<Person> me) { return me.Add("recommendations-received"); }
        
        /// <summary>
        /// Includes the field 'following'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithFollowing(this FieldSelector<Person> me) { return me.Add("following"); }
        
        /// <summary>
        /// Includes the field 'job-bookmarks'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithJobBookmarks(this FieldSelector<Person> me) { return me.Add("job-bookmarks"); }
        
        /// <summary>
        /// Includes the field 'suggestions'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithSuggestions(this FieldSelector<Person> me) { return me.Add("suggestions"); }
        
        /// <summary>
        /// Includes the field 'date-of-birth'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithDateOfBirth(this FieldSelector<Person> me) { return me.Add("date-of-birth"); }
        
        /// <summary>
        /// Includes the field 'member-url-resources'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithMemberUrlResources(this FieldSelector<Person> me) { return me.Add("member-url-resources"); }
        
        /// <summary>
        /// Includes the field 'related-profile-views'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithRelatedProfileViews(this FieldSelector<Person> me) { return me.Add("related-profile-views"); }
        
        /// <summary>
        /// Includes the field 'honors-awards'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithHonorsAwards(this FieldSelector<Person> me) { return me.Add("honors-awards"); }
        
        /// <summary>
        /// Includes the field 'phone-numbers'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithPhoneNumbers(this FieldSelector<Person> me) { return me.Add("phone-numbers"); }
        
        /// <summary>
        /// Includes the field 'bound-account-types'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithBoundAccountTypes(this FieldSelector<Person> me) { return me.Add("bound-account-types"); }
        
        /// <summary>
        /// Includes the field 'im-accounts'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithImAccounts(this FieldSelector<Person> me) { return me.Add("im-accounts"); }
        
        /// <summary>
        /// Includes the field 'main-address'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithMainAddress(this FieldSelector<Person> me) { return me.Add("main-address"); }
        
        /// <summary>
        /// Includes the field 'twitter-accounts'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithTwitterAccounts(this FieldSelector<Person> me) { return me.Add("twitter-accounts"); }
        
        /// <summary>
        /// Includes the field 'primary-twitter-account'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithPrimaryTwitterAccount(this FieldSelector<Person> me) { return me.Add("primary-twitter-account"); }
        
        /// <summary>
        /// Includes the field 'connections'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithConnections(this FieldSelector<Person> me) { return me.Add("connections"); }
        
        /// <summary>
        /// Includes the field 'group-memberships'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithGroupMemberships(this FieldSelector<Person> me) { return me.Add("group-memberships"); }
        
        /// <summary>
        /// Includes the field 'network'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithNetwork(this FieldSelector<Person> me) { return me.Add("network"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithAllFields(this FieldSelector<Person> me) { return me.AddRange("first-name", "last-name", "headline", "site-standard-profile-request", "id", "maiden-name", "formatted-name", "phonetic-first-name", "phonetic-last-name", "formatted-phonetic-name", "location:(name)", "location:(country:(code))", "industry", "distance", "relation-to-viewer", "current-status-timestamp", "current-share", "num-connections", "num-connections-capped", "summary", "specialties", "positions", "picture-url", "site-standard-profile-request", "api-standard-profile-request:(url)", "api-standard-profile-request:(headers)", "public-profile-url", "email-address", "last-modified-timestamp", "proposal-comments", "associations", "interests", "publications", "patents:(id,title,summary,number,status:(id,name),office:(name),inventors:(id,name,person),date,url)", "languages:(id)", "languages:(language)", "languages:(proficiency)", "skills", "certifications:(id,name,authority:(name),number,start-date,end-date)", "educations", "courses", "volunteer:(volunteer-experiences:(id,role,organization:(name),cause:(name)))", "three-current-positions", "three-past-positions", "num-recommenders", "recommendations-received", "following", "job-bookmarks", "suggestions", "date-of-birth", "member-url-resources", "related-profile-views", "honors-awards", "phone-numbers", "bound-account-types", "im-accounts", "main-address", "twitter-accounts", "primary-twitter-account", "connections", "group-memberships", "network"); }
        
    }
}

// WriteReturnTypes(ApiGroup(N='Companies', M=4, RT=1), ReturnType(N='company' CN='Company' F=2))
namespace Sparkle.LinkedInNET.Companies
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Name: 'company'
    /// </summary>
    [Serializable, XmlRoot("company")]
    public class Company
    {
        /// <summary>
        /// Field: 'id' (default)
        /// </summary>
        [XmlElement(ElementName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Field: 'name' (default)
        /// </summary>
        [XmlElement(ElementName = "name")]
        public string Name { get; set; }

    }
}

// WriteReturnTypeFields(ApiGroup(N='Companies', M=4, RT=1))
namespace Sparkle.LinkedInNET.Companies
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Field selectors for the 'company' return types.
    /// </summary>
    public static class CompaniesFields {
    }
}

// WriteReturnTypeFields(ApiGroup(N='Groups', M=0, RT=0))
namespace Sparkle.LinkedInNET.Groups
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Field selectors for the '' return types.
    /// </summary>
    public static class GroupsFields {
    }
}

// WriteReturnTypeFields(ApiGroup(N='Jobs', M=0, RT=0))
namespace Sparkle.LinkedInNET.Jobs
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Field selectors for the '' return types.
    /// </summary>
    public static class JobsFields {
    }
}

// WriteApiGroup(ApiGroup(N='Profiles', M=5, RT=67))
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Xml.Serialization;
    using Sparkle.LinkedInNET.Internals;

    /// <summary>
    /// Name: 'Profiles'
    /// </summary>
    public class ProfilesApi : BaseApi
    {
        internal ProfilesApi(LinkedInApi linkedInApi)
            : base(linkedInApi)
        {
        }
        
        /// <summary>
        /// the profile of the current user
        /// </summary>
        public Person GetMyProfile(
              UserAuthorization user
            , string[] acceptLanguages = null
            , FieldSelector<Person> fields = null
        )
        {
            const string urlFormat = "/v1/people/~{FieldSelector}";
            var url = FormatUrl(urlFormat, fields);

            var context = new RequestContext();
            context.UserAuthorization = user;
            context.AcceptLanguages = acceptLanguages;
            context.Method =  "GET";
            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;

            if (!this.ExecuteQuery(context))
                this.HandleXmlErrorResponse(context);
            return this.HandleXmlResponse<Person>(context);
        }
        
        /// <summary>
        /// the profile of a user in the network
        /// </summary>
        public Person GetProfileById(
              UserAuthorization user
            , string memberToken
            , string[] acceptLanguages = null
            , FieldSelector<Person> fields = null
        )
        {
            const string urlFormat = "/v1/people/id={MemberToken}{FieldSelector}";
            var url = FormatUrl(urlFormat, fields, "MemberToken", memberToken);

            var context = new RequestContext();
            context.UserAuthorization = user;
            context.AcceptLanguages = acceptLanguages;
            context.Method =  "GET";
            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;

            if (!this.ExecuteQuery(context))
                this.HandleXmlErrorResponse(context);
            return this.HandleXmlResponse<Person>(context);
        }
        
        /// <summary>
        /// the public profile of a user
        /// </summary>
        public Person GetPublicProfile(
              UserAuthorization user
            , string publicProfileUrl
            , string[] acceptLanguages = null
            , FieldSelector<Person> fields = null
        )
        {
            const string urlFormat = "/v1/people/url={PublicProfileUrl}{FieldSelector}";
            var url = FormatUrl(urlFormat, fields, "PublicProfileUrl", publicProfileUrl);

            var context = new RequestContext();
            context.UserAuthorization = user;
            context.AcceptLanguages = acceptLanguages;
            context.Method =  "GET";
            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;

            if (!this.ExecuteQuery(context))
                this.HandleXmlErrorResponse(context);
            return this.HandleXmlResponse<Person>(context);
        }
        
        /// <summary>
        /// returns a list of 1st degree connections for a user 
        /// </summary>
        public Connections GetMyConnections(
              UserAuthorization user
            , FieldSelector<Connections> fields = null
        )
        {
            var url = "/v1/people/~/connections";

            var context = new RequestContext();
            context.UserAuthorization = user;
            context.Method =  "GET";
            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;

            if (!this.ExecuteQuery(context))
                this.HandleXmlErrorResponse(context);
            return this.HandleXmlResponse<Connections>(context);
        }
        
        /// <summary>
        /// returns a list of 1st degree connections for a user 
        /// </summary>
        public Person GetConnectionsByProfileId(
              UserAuthorization user
            , string memberToken
            , FieldSelector<Person> fields = null
        )
        {
            const string urlFormat = "/v1/people/id={MemberToken}/connections";
            var url = FormatUrl(urlFormat, fields, "MemberToken", memberToken);

            var context = new RequestContext();
            context.UserAuthorization = user;
            context.Method =  "GET";
            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;

            if (!this.ExecuteQuery(context))
                this.HandleXmlErrorResponse(context);
            return this.HandleXmlResponse<Person>(context);
        }
        
    }
}

// WriteApiGroup(ApiGroup(N='Companies', M=4, RT=1))
namespace Sparkle.LinkedInNET.Companies
{
    using System;
    using System.Xml.Serialization;
    using Sparkle.LinkedInNET.Internals;

    /// <summary>
    /// Name: 'Companies'
    /// </summary>
    public class CompaniesApi : BaseApi
    {
        internal CompaniesApi(LinkedInApi linkedInApi)
            : base(linkedInApi)
        {
        }
        
        /// <summary>
        /// Hacker Summary
        /// </summary>
        public Company GetList(
              UserAuthorization user
            , FieldSelector<Company> fields = null
        )
        {
            var url = "/v1/companies";

            var context = new RequestContext();
            context.UserAuthorization = user;
            context.Method =  "GET";
            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;

            if (!this.ExecuteQuery(context))
                this.HandleXmlErrorResponse(context);
            return this.HandleXmlResponse<Company>(context);
        }
        
        /// <summary>
        /// retrieve a company by using the company ID
        /// </summary>
        public Company GetById(
              UserAuthorization user
            , string companyId
            , FieldSelector<Company> fields = null
        )
        {
            const string urlFormat = "/v1/companies/{CompanyId}";
            var url = FormatUrl(urlFormat, fields, "CompanyId", companyId);

            var context = new RequestContext();
            context.UserAuthorization = user;
            context.Method =  "GET";
            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;

            if (!this.ExecuteQuery(context))
                this.HandleXmlErrorResponse(context);
            return this.HandleXmlResponse<Company>(context);
        }
        
        /// <summary>
        /// Retrieve a company by universal-name.
        /// </summary>
        public Company GetByName(
              UserAuthorization user
            , string universalName
            , FieldSelector<Company> fields = null
        )
        {
            const string urlFormat = "/v1/companies/universal-name={UniversalName}";
            var url = FormatUrl(urlFormat, fields, "UniversalName", universalName);

            var context = new RequestContext();
            context.UserAuthorization = user;
            context.Method =  "GET";
            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;

            if (!this.ExecuteQuery(context))
                this.HandleXmlErrorResponse(context);
            return this.HandleXmlResponse<Company>(context);
        }
        
        /// <summary>
        /// This returns an array of companies that match to the specified email domain.
        /// </summary>
        public Company GetListByEmailDomain(
              UserAuthorization user
            , string universalName
            , FieldSelector<Company> fields = null
        )
        {
            const string urlFormat = "/v1/companies/universal-name={UniversalName}";
            var url = FormatUrl(urlFormat, fields, "UniversalName", universalName);

            var context = new RequestContext();
            context.UserAuthorization = user;
            context.Method =  "GET";
            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;

            if (!this.ExecuteQuery(context))
                this.HandleXmlErrorResponse(context);
            return this.HandleXmlResponse<Company>(context);
        }
        
    }
}

// WriteApiGroup(ApiGroup(N='Groups', M=0, RT=0))
namespace Sparkle.LinkedInNET.Groups
{
    using System;
    using System.Xml.Serialization;
    using Sparkle.LinkedInNET.Internals;

    /// <summary>
    /// Name: 'Groups'
    /// </summary>
    public class GroupsApi : BaseApi
    {
        internal GroupsApi(LinkedInApi linkedInApi)
            : base(linkedInApi)
        {
        }
        
    }
}

// WriteApiGroup(ApiGroup(N='Jobs', M=0, RT=0))
namespace Sparkle.LinkedInNET.Jobs
{
    using System;
    using System.Xml.Serialization;
    using Sparkle.LinkedInNET.Internals;

    /// <summary>
    /// Name: 'Jobs'
    /// </summary>
    public class JobsApi : BaseApi
    {
        internal JobsApi(LinkedInApi linkedInApi)
            : base(linkedInApi)
        {
        }
        
    }
}

// WriteRootServices()
namespace Sparkle.LinkedInNET
{
    using System;
    using System.Xml.Serialization;
    using Sparkle.LinkedInNET.Internals;
    using Sparkle.LinkedInNET.Profiles;
    using Sparkle.LinkedInNET.Companies;
    using Sparkle.LinkedInNET.Groups;
    using Sparkle.LinkedInNET.Jobs;

    /// <summary>
    /// The factory for LinkedIn APIs.
    /// </summary>
    public partial class LinkedInApi : BaseApi
    {
        /// <summary>
        /// The Profiles API.
        /// </summary>
        public ProfilesApi Profiles{
            get { return new ProfilesApi(this); }
        }

        /// <summary>
        /// The Companies API.
        /// </summary>
        public CompaniesApi Companies{
            get { return new CompaniesApi(this); }
        }

        /// <summary>
        /// The Groups API.
        /// </summary>
        public GroupsApi Groups{
            get { return new GroupsApi(this); }
        }

        /// <summary>
        /// The Jobs API.
        /// </summary>
        public JobsApi Jobs{
            get { return new JobsApi(this); }
        }

    }
}


